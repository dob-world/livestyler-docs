{"config":{"lang":["en","ko"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LiveStyler","text":"<p>LiveStyler\ub294 dob Studio\uc5d0\uc11c \uac1c\ubc1c\ud55c AI\uae30\ubc18 \uc601\uc0c1 \ud544\ud130 \uc11c\ube44\uc2a4 Devut.ai\ub97c \ub354\uc6b1 \ub354 \ubc1c\uc804\uc2dc\ud0a8 \uc2e4\uc2dc\uac04 AI \uc601\uc0c1 \ud544\ud130 \ud6a8\uacfc \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4.</p>"},{"location":"#livestyler_1","title":"LiveStyler\uc758 \ud2b9\uc9d5","text":"<p>LiveStyler\ub294 \uad6c\ucd95\ud558\uace0 \uc720\uc9c0\ubcf4\uc218\ud558\ub294\ub370 \ud070 \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud558\ub294 \uc124\uce58\ud615 AI \ubaa8\ub378\uc744 \ud074\ub77c\uc6b0\ub4dc\ub85c \uc81c\uacf5\ud558\uc5ec \uad6c\ucd95 \ube44\uc6a9\uc744 \uc904\uc774\uba74\uc11c, \uc27d\uac8c \ub3c4\uc785\ud560 \uc218 \uc788\uac8c \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4.</p> <p>\uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ub610\ub294 \uc6f9 \uc11c\ube44\uc2a4\ub97c \ud1b5\ud574 \uce74\uba54\ub77c\ub85c \ucd2c\uc601\ud55c \uc601\uc0c1\uc744 \uc2e4\uc2dc\uac04\uc73c\ub85c \ud074\ub77c\uc6b0\ub4dc\ub85c \uc804\uc1a1\ud558\uc5ec AI \ud544\ud130\ub97c \uc801\uc6a9\ud55c \uc601\uc0c1\uc744 \ub9cc\ub4e4\uc5b4\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"#_1","title":"\ubb38\uc11c \uc548\ub0b4","text":"<p>\uc774 \ubb38\uc11c\ub294 LiveStyler \uc11c\ube44\uc2a4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c SDK\uc640 API\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p> <ul> <li>SDK: iOS, Android, Flutter \ub4f1 \ub2e4\uc591\ud55c \ud50c\ub7ab\ud3fc\uc5d0\uc11c LiveStyler\ub97c \uc27d\uac8c \ud1b5\ud569\ud560 \uc218 \uc788\ub3c4\ub85d SDK\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uac01 \ud50c\ub7ab\ud3fc \ubcc4 \uac00\uc774\ub4dc\uc640 \uc608\uc81c \ucf54\ub4dc\ub97c \ud655\uc778\ud558\uc5ec \ube60\ub974\uac8c \uac1c\ubc1c\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>API: RESTful API\uc640 WebSocket API\ub97c \ud1b5\ud574 LiveStyler\uc758 \uae30\ub2a5\ub4e4\uc744 \uc9c1\uc811 \uc81c\uc5b4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. API \uba85\uc138\uc640 \uc0ac\uc6a9\ubc95\uc744 \ucc38\uace0\ud558\uc5ec \uc11c\ube44\uc2a4\uc5d0 \ub9de\ub294 \ucee4\uc2a4\ud140 \uc5f0\ub3d9\uc744 \uad6c\ud604\ud574 \ubcf4\uc138\uc694.</li> </ul>"},{"location":"api/overview/","title":"LiveStyler API","text":"<p>LiveStyler\ub294 \uc2e4\uc2dc\uac04 \uc601\uc0c1 \ucc98\ub9ac\ub97c \uc704\ud55c WebSocket API\uc640 \ud544\ud130 \uac19\uc740 \ub9ac\uc18c\uc2a4\ub97c \uad00\ub9ac\ud558\uae30 \uc704\ud55c REST API, \ub450 \uac00\uc9c0 \ud615\ud0dc\uc758 API\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p> <ul> <li>REST API: \ud544\ud130 \ubaa9\ub85d\uc744 \uc870\ud68c\ud558\ub294 \ub4f1 \uc11c\ube44\uc2a4\uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uad00\ub9ac\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li>WebSocket API : WebRTC\ub97c \ud1b5\ud574 \uc2e4\uc2dc\uac04\uc73c\ub85c \ube44\ub514\uc624 \uc2a4\ud2b8\ub9bc\uc744 \uc8fc\uace0\ubc1b\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> </ul>"},{"location":"api/overview/#_1","title":"\uc2dc\uc791\ud558\uae30 \uc804\uc5d0","text":"<p>API \uc2dc\ud06c\ub9bf \ud0a4 \ubc1c\uae09</p> <p>\uc774 API\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 API \uc2dc\ud06c\ub9bf \ud0a4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. API \uc2dc\ud06c\ub9bf \ud0a4\ub294 \ube44\uc988\ub2c8\uc2a4 \ubb38\uc758\ub098 \uad00\ub9ac\ud398\uc774\uc9c0\ub97c \ud1b5\ud574 \ubc1c\uae09\ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"api/overview/#api-url","title":"API \uc5f0\ub3d9\uc744 \uc704\ud55c \uae30\ubcf8 URL","text":"<ul> <li>WebSocket: <code>wss://bridge-paoqov032tbx.livestyler.ai/client</code></li> <li>REST API: <code>https://api-paoqov032tbx.livestyler.ai</code></li> </ul>"},{"location":"api/rest/","title":"REST API","text":""},{"location":"api/rest/#_1","title":"\uc2dc\uc791\ud558\uae30","text":"<p>\uae30\ubcf8 URL\uc740 <code>https://api-paoqov032tbx.livestyler.ai</code> \uc785\ub2c8\ub2e4.</p>"},{"location":"api/rest/#_2","title":"\uc778\uc99d","text":"<p>REST API\ub294 Basic Authentication\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. <code>Authorization</code> \ud5e4\ub354\uc5d0 API \uc2dc\ud06c\ub9bf \ud0a4\ub97c \ub2f4\uc544 \uc694\uccad\uc744 \ubcf4\ub0b4\uc57c \ud569\ub2c8\ub2e4.</p> <p>\uc778\uc99d \ud5e4\ub354 \uc0dd\uc131 \uacfc\uc815:</p> <ol> <li> <p><code>API \uc2dc\ud06c\ub9bf \ud0a4</code> \ub4a4\uc5d0 \ucf5c\ub860(<code>:</code>)\uc744 \ubd99\uc5ec \ubb38\uc790\uc5f4\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ube44\ubc00\ubc88\ud638 \ubd80\ubd84\uc740 \ube44\uc6cc\ub461\ub2c8\ub2e4.</p> <ul> <li>\uc608: <code>your_api_key_here:</code></li> </ul> </li> <li> <p>\uc0dd\uc131\ud55c \ubb38\uc790\uc5f4\uc744 Base64\ub85c \uc778\ucf54\ub529\ud569\ub2c8\ub2e4.</p> <ul> <li>\uc608: <code>eW91cl9hcGlfa2V5X2hlcmU6</code></li> </ul> <p>Tip: \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc774\uc6a9\ud55c Base64 \uc778\ucf54\ub529 \ubc29\ubc95</p> <p>Unix/Linux/macOS \ud130\ubbf8\ub110\uc5d0\uc11c \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c \uc27d\uac8c \uc778\ucf54\ub529\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. <pre><code>echo -n 'your_api_key_here:' | base64\n</code></pre></p> </li> <li> <p>\uc778\ucf54\ub529\ub41c \ubb38\uc790\uc5f4 \uc55e\uc5d0 <code>Basic</code>\uc744 \ubd99\uc5ec <code>Authorization</code> \ud5e4\ub354 \uac12\uc744 \uc644\uc131\ud569\ub2c8\ub2e4.</p> <ul> <li>\uc608: <code>Authorization: Basic eW91cl9hcGlfa2V5X2hlcmU6</code></li> </ul> </li> </ol>"},{"location":"api/rest/#rest-api_1","title":"REST API","text":"<p>LiveStyler\uc758 \ud544\ud130 \ub4f1 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uad00\ub9ac\ud558\ub294 API\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 REST API\uc758 \uae30\ubcf8 URL\uc740 <code>https://api-paoqov032tbx.livestyler.ai</code> \uc785\ub2c8\ub2e4.</p>"},{"location":"api/rest/#_3","title":"\uc5d4\ub4dc\ud3ec\uc778\ud2b8","text":""},{"location":"api/rest/#get-filter-categoryactive","title":"<code>GET /filter-category/active</code>","text":"<ul> <li>\uc124\uba85: \ud604\uc7ac \ud65c\uc131\ud654\ub41c \ubaa8\ub4e0 \ud544\ud130 \uce74\ud14c\uace0\ub9ac\uc640 \uac01 \uce74\ud14c\uace0\ub9ac\uc5d0 \uc18d\ud55c \ud544\ud130 \ubaa9\ub85d\uc744 \ud568\uaed8 \uc870\ud68c\ud569\ub2c8\ub2e4.</li> </ul> <p>\uc131\uacf5 \uc751\ub2f5: <code>200 OK</code></p> <pre><code>[\n  {\n    \"filter_category_id\": \"01JXYDX55DHRY0T0RSDH068BYK\",\n    \"organization_id\": \"01JXY3YG23J6D9PEHBN3DTGFQX\",\n    \"name_ko\": \"\ub85c\ub9e8\ud2f1\",\n    \"name_en\": \"romantic\",\n    \"description\": \"\ub85c\ub9e8\ud2f1 \uce74\ud14c\uace0\ub9ac\",\n    \"is_active\": true,\n    \"created_at\": \"2025-06-17T07:50:51.313Z\",\n    \"updated_at\": \"2025-06-17T07:50:51.313Z\",\n    \"deleted_at\": null,\n    \"filters\": [\n      {\n        \"filter_id\": \"01JXYE1C805H1YAY7DTY1K6PHW\",\n        \"organization_id\": \"01JXY3YG23J6D9PEHBN3DTGFQX\",\n        \"filter_category_id\": \"01JXYDX55DHRY0T0RSDH068BYK\",\n        \"code\": \"filter_01\",\n        \"name_ko\": \"\ub85c\ub9e8\ud2f1 1\",\n        \"name_en\": \"romantic 1\",\n        \"image_url\": \"https://example.com/image.jpg\",\n        \"is_active\": true,\n        \"is_recommended\": false,\n        \"created_at\": \"2025-06-17T07:53:09.634Z\",\n        \"updated_at\": \"2025-06-17T07:53:09.634Z\",\n        \"deleted_at\": null\n      }\n    ]\n  },\n  {\n    \"filter_category_id\": \"01JXYDYQWWG8SKNK1ENV4EKVCE\",\n    \"organization_id\": \"01JXY3YG23J6D9PEHBN3DTGFQX\",\n    \"name_ko\": \"\ub9cc\ud654\",\n    \"name_en\": \"cartoon\",\n    \"description\": \"\ub9cc\ud654 \uce74\ud14c\uace0\ub9ac\",\n    \"is_active\": true,\n    \"created_at\": \"2025-06-17T07:51:43.261Z\",\n    \"updated_at\": \"2025-06-17T07:51:43.261Z\",\n    \"deleted_at\": null,\n    \"filters\": []\n  }\n]\n</code></pre> <p>\uc2e4\ud328 \uc751\ub2f5: <code>401 Unauthorized</code></p> <pre><code>{\n  \"message\": \"Invalid credentials\"\n}\n</code></pre> <p>cURL \uc608\uc2dc:</p> <p>\ub2e4\uc74c\uc740 <code>cURL</code>\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud544\ud130 \ubaa9\ub85d\uc744 \uc870\ud68c\ud558\ub294 API\ub97c \ud638\ucd9c\ud558\ub294 \uc804\uccb4 \uc608\uc81c\uc785\ub2c8\ub2e4.</p> <pre><code>curl --location 'https://api-paoqov032tbx.livestyler.ai/filter-category/active' \\\n--header 'Authorization: Basic eW91cl9hcGlfa2V5X2hlcmU6'\n</code></pre>"},{"location":"api/websocket/","title":"WebSocket API","text":""},{"location":"api/websocket/#_1","title":"\uc2dc\uc791\ud558\uae30","text":"<p>\uae30\ubcf8 \uc5f0\uacb0 \uc8fc\uc18c\ub294 <code>wss://bridge-paoqov032tbx.livestyler.ai/client</code> \uc785\ub2c8\ub2e4.</p>"},{"location":"api/websocket/#_2","title":"\uc778\uc99d","text":"<p>WebSocket \uc5f0\uacb0\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c0\uba74, \uac00\uc7a5 \uba3c\uc800 \uc11c\ubc84\uc5d0 \uc778\uc99d\uc744 \uc694\uccad\ud574\uc57c \ud569\ub2c8\ub2e4. \uc778\uc99d\uc740 \ubc1c\uae09\ubc1b\uc740 <code>API \uc2dc\ud06c\ub9bf \ud0a4</code>\ub97c <code>CREDENTIAL</code> \uba54\uc2dc\uc9c0\uc5d0 \ub2f4\uc544 \uc804\uc1a1\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</p>"},{"location":"api/websocket/#client-server","title":"\uc778\uc99d \uc694\uccad (Client \u2192 Server)","text":"<p>\ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \uc544\ub798\uc640 \uac19\uc740 \ud615\uc2dd\uc758 \uba54\uc2dc\uc9c0\ub97c \uc11c\ubc84\ub85c \uc804\uc1a1\ud569\ub2c8\ub2e4.</p> <ul> <li><code>type</code>: <code>CREDENTIAL</code></li> <li><code>payload.credential</code>: \ubc1c\uae09\ubc1b\uc740 <code>API \uc2dc\ud06c\ub9bf \ud0a4</code></li> </ul> <pre><code>{\n  \"type\": \"CREDENTIAL\",\n  \"payload\": {\n    \"credential\": \"sk_TEST01_my0Secret1Token2Value3\"\n  }\n}\n</code></pre>"},{"location":"api/websocket/#server-client","title":"\uc778\uc99d \uc751\ub2f5 (Server \u2192 Client)","text":"<p>\uc11c\ubc84\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\uc758 \uc778\uc99d \uc694\uccad\uc5d0 \ub300\ud574 \ub2e4\uc74c\uacfc \uac19\uc774 \uc751\ub2f5\ud569\ub2c8\ub2e4.</p> <p>\uc778\uc99d \uc131\uacf5 (Success)</p> <p>\uc778\uc99d \uc815\ubcf4\uac00 \uc720\ud6a8\ud558\uba74 \uc11c\ubc84\ub294 \uc544\ub798\uc640 \uac19\uc740 <code>auth_success</code> \uba54\uc2dc\uc9c0\ub97c \uc804\uc1a1\ud569\ub2c8\ub2e4. \uc774 \uba54\uc2dc\uc9c0\ub97c \uc218\uc2e0\ud55c \ud6c4\ubd80\ud130 \ub2e4\ub978 API \uba54\uc2dc\uc9c0\ub97c \uc8fc\uace0\ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>{\n  \"type\": \"auth_success\"\n}\n</code></pre> <p>\uc778\uc99d \uc2e4\ud328 (Failure)</p> <p>\uc778\uc99d \uc815\ubcf4\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0, \uc11c\ubc84\ub294 \ubcc4\ub3c4\uc758 \uc624\ub958 \uba54\uc2dc\uc9c0 \uc5c6\uc774 WebSocket \uc5f0\uacb0\uc744 \uc989\uc2dc \uc885\ub8cc\ud569\ub2c8\ub2e4.</p>"},{"location":"api/websocket/#websocket-api_1","title":"WebSocket API","text":"<p>WebRTC \ud1b5\uc2e0\uc744 \uc704\ud55c API\uc785\ub2c8\ub2e4.</p> <p>SDK \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \uc548\ub0b4</p> <p>\uc774 API\ub294 SDK\uc5d0 \uc774\ubbf8 \ud1b5\ud569\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c, SDK\ub97c \uc0ac\uc6a9\ud558\uba74 \uc774 API\ub97c \uc9c1\uc811 \ud638\ucd9c\ud560 \ud544\uc694 \uc5c6\uc774 WebRTC \uae30\ub2a5\uc744 \ubc14\ub85c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"api/websocket/#_3","title":"\uba54\uc2dc\uc9c0 \uc885\ub958","text":""},{"location":"api/websocket/#session_start","title":"<code>session_start</code>","text":"<p>(\ud074\ub77c\uc774\uc5b8\ud2b8 \u2192 \uc11c\ubc84) WebRTC \uc138\uc158 \uc2dc\uc791 \uc815\ubcf4\ub97c \uc11c\ubc84\ub85c \uc804\uc1a1\ud569\ub2c8\ub2e4. <pre><code>{\n  \"type\": \"session_start\"\n}\n</code></pre></p> <p>\uc138\uc158 \uc2dc\uc791 \uc815\ubcf4</p> <ul> <li>\uc11c\ubc84\uc758 \uc778\uc2a4\ud134\uc2a4 \uc0c1\ud0dc\uc5d0 \ub530\ub77c \ub2e4\uc74c\uacfc \uac19\uc740 \uba54\uc2dc\uc9c0\uac00 \uc804\ub2ec\ub429\ub2c8\ub2e4.</li> <li><code>{ \"type\": \"node_status\", \"status\": \"pending\"}</code>: \uc11c\ubc84\uac00 \ud504\ub85c\ube44\uc800\ub2dd \uc911\uc784\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</li> <li><code>{ \"type\": \"node_status\", \"status\": \"full\"}</code>: \uc11c\ubc84\uc758 \ub9ac\uc18c\uc2a4\uac00 \uac00\ub4dd \ucc28 \uc788\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</li> <li><code>{ \"type\": \"node_status\", \"status\": \"waiting\"}</code>: \uc11c\ubc84 \uc778\uc2a4\ud134\uc2a4 \uc900\ube44\uac00 \uc644\ub8cc\ub41c \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</li> </ul>"},{"location":"api/websocket/#offer","title":"<code>offer</code>","text":"<p>(\ud074\ub77c\uc774\uc5b8\ud2b8 \u2192 \uc11c\ubc84) WebRTC offer \uc815\ubcf4\ub97c \uc11c\ubc84\ub85c \uc804\uc1a1\ud569\ub2c8\ub2e4. <pre><code>{\n  \"type\": \"offer\",\n  \"sdp\": \"{offer sdp}\"\n}\n</code></pre></p> <p>\uc131\uacf5 \uc2dc</p> <ul> <li>\uc11c\ubc84\uac00 \ud504\ub85c\ube44\uc800\ub2dd\ub420 \uacbd\uc6b0 <code>{\"type\":\"server_provisioning\"}</code> \uba54\uc2dc\uc9c0\uac00 \uc804\ub2ec\ub429\ub2c8\ub2e4.</li> <li>\uae30\uc874 \uc11c\ubc84\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \ubcc4\ub3c4 \uba54\uc2dc\uc9c0\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.</li> </ul> <p>\uc2e4\ud328 \uc2dc</p> <ul> <li>\uc624\ub958 \uba54\uc2dc\uc9c0\uac00 \uc804\ub2ec\ub429\ub2c8\ub2e4.<ul> <li><code>Maximum pool size reached. Cannot assign a new node.</code>: \uc0c8 \ub178\ub4dc\ub97c \ud560\ub2f9\ud560 \uc218 \uc5c6\uc744 \ub54c \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li><code>Failed to start a stopped node.</code>: \uc815\uc9c0\ub41c \ub178\ub4dc\ub97c \uc2dc\uc791\ud558\uc9c0 \ubabb\ud588\uc744 \ub54c \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"api/websocket/#answer","title":"<code>answer</code>","text":"<p>(\uc11c\ubc84 \u2192 \ud074\ub77c\uc774\uc5b8\ud2b8) WebRTC answer \uc815\ubcf4\ub97c \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c \uc804\uc1a1\ud569\ub2c8\ub2e4. <pre><code>{\n  \"type\": \"answer\",\n  \"sdp\": \"{answer sdp}\"\n}\n</code></pre></p>"},{"location":"api/websocket/#candidate","title":"<code>candidate</code>","text":"<p>(\uc591\ubc29\ud5a5) WebRTC ICE candidate \uc815\ubcf4\ub97c \uc591\ubc29\ud5a5\uc73c\ub85c \uad50\ud658\ud569\ub2c8\ub2e4. <pre><code>{\n  \"type\": \"candidate\",\n  \"candidate\": {\n    \"sdpMid\": \"{ice candidate sdpMid}\",\n    \"sdpMLineIndex\": {ice candidate sdpMLineIndex},\n    \"candidate\": \"{ice candidate}\"\n  }\n}\n</code></pre></p>"},{"location":"sdk/android-fragmentstreamxml/","title":"fragment_stream.xml\uc758 \uc18c\uc2a4\ucf54\ub4dc","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"ai.livestyler.LiveStylerSDKAndroid.StreamFragment\"&gt;\n\n    &lt;FrameLayout\n        android:id=\"@+id/render_view_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/black\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"&gt;\n\n        &lt;org.webrtc.SurfaceViewRenderer\n            android:id=\"@+id/render_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"center\"\n            /&gt;\n\n    &lt;/FrameLayout&gt;\n\n    &lt;androidx.appcompat.widget.AppCompatImageView\n        android:id=\"@+id/imageview_logo\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"33.5dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:src=\"@drawable/logo_live_styler\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/textview_local_stream\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"4dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"4dp\"\n        style=\"@style/TextAppearance.MaterialComponents.Caption\"\n        android:text=\"@string/provisioning_server_stream\"\n        android:textSize=\"10sp\"\n        android:textStyle=\"bold\"\n        android:textColor=\"@color/white\"\n        android:textAlignment=\"textEnd\"\n        app:layout_constraintTop_toBottomOf=\"@id/imageview_logo\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toTopOf=\"@id/textview_remote_stream\"\n        tools:ignore=\"SmallSp\" /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/textview_remote_stream\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"4dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"16dp\"\n        style=\"@style/TextAppearance.MaterialComponents.Caption\"\n        android:text=\"@string/provisioning_server_stream\"\n        android:textSize=\"10sp\"\n        android:textStyle=\"bold\"\n        android:textColor=\"@color/white\"\n        android:textAlignment=\"textEnd\"\n        app:layout_constraintTop_toBottomOf=\"@id/textview_local_stream\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        tools:ignore=\"SmallSp\" /&gt;\n\n    &lt;FrameLayout\n        android:id=\"@+id/preview_container\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"1dp\"\n        android:layout_marginTop=\"33.5dp\"\n        android:background=\"@color/black\"\n        app:layout_constraintTop_toBottomOf=\"@id/imageview_logo\"\n        app:layout_constraintStart_toStartOf=\"@id/imageview_logo\"&gt;\n\n        &lt;org.webrtc.SurfaceViewRenderer\n            android:id=\"@+id/preview\"\n            android:layout_width=\"90dp\"\n            android:layout_height=\"160dp\"\n            android:layout_gravity=\"center\"\n            /&gt;\n\n    &lt;/FrameLayout&gt;\n\n    &lt;Spinner\n        android:id=\"@+id/spinner_camera\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintStart_toStartOf=\"@id/preview_container\"\n        app:layout_constraintTop_toBottomOf=\"@id/preview_container\"\n        app:layout_constraintEnd_toEndOf=\"@id/preview_container\"\n        android:paddingEnd=\"0dp\"\n        tools:listitem=\"@layout/support_simple_spinner_dropdown_item\"\n        tools:ignore=\"RtlSymmetry\" /&gt;\n\n    &lt;include\n        layout=\"@layout/button_style_panel\"\n        android:id=\"@+id/style_panel_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"35dp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"1\"\n        app:layout_constraintVertical_bias=\"1\"\n        /&gt;\n\n    &lt;include\n        layout=\"@layout/layout_style_panel\"\n        android:id=\"@+id/style_panel\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintVertical_bias=\"1\"\n        android:visibility=\"invisible\"\n        /&gt;\n\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;\n</code></pre>"},{"location":"sdk/android-streamfragmentkt/","title":"StreamFragment\uc758 \uc18c\uc2a4\ucf54\ub4dc","text":"<pre><code>class StreamFragment : Fragment(), SignalStateListener, RendererStateListener {\n\n    // Layout Binding\n    private var _binding: FragmentStreamBinding? = null\n\n    // This property is only valid between onCreateView and\n    // onDestroyView.\n    private val binding get() = _binding!!\n\n    private lateinit var liveStylerManager: LiveStylerManager\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        liveStylerManager = LiveStylerManager(\n            {credential},\n            {apiEndpoint},\n            {signalEndpoint},\n            {servers},\n        )\n\n        liveStylerManager.onCreate(requireContext(), this)\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentStreamBinding.inflate(inflater, container, false)\n        liveStylerManager.onCreateView(this, this)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        liveStylerManager.onViewCreated(binding.preview, binding.renderView)\n\n        // \uce74\uba54\ub77c \ud37c\ubbf8\uc158 \uccb4\ud06c \ubc0f \uc694\uccad\n        when {\n            ContextCompat.checkSelfPermission(\n                requireContext(),\n                Manifest.permission.CAMERA\n            ) == PackageManager.PERMISSION_GRANTED -&gt; {\n                // You can use the API that requires the permission.\n            }\n            shouldShowRequestPermissionRationale(Manifest.permission.CAMERA) -&gt; {\n                // In an educational UI, explain to the user why your app requires this\n                // permission for a specific feature to behave as expected, and what\n                // features are disabled if it's declined. In this UI, include a\n                // \"cancel\" or \"no thanks\" button that allows the user to continue\n                // using your app without granting the permission.\n                // showInContextUI(...)\n            }\n            else -&gt; {\n                // You can directly ask for the permission.\n                requestPermissionLauncher.launch(Manifest.permission.CAMERA)\n            }\n        }\n    }\n\n    @RequiresPermission(Manifest.permission.CAMERA)\n    override fun onResume() {\n        super.onResume()\n        liveStylerManager.onResume()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        liveStylerManager.onPause()\n    }\n\n    override fun onStop() {\n        liveStylerManager.onStop()\n        super.onStop()\n    }\n\n    override fun onDestroyView() {\n        liveStylerManager.onDestroy()\n        _binding = null\n        super.onDestroyView()\n    }\n\n    /* SignalStateListener \uc778\ud130\ud398\uc774\uc2a4 \uba54\uc18c\ub4dc \uad6c\ud604 */\n    override fun onServerPreparing() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onServerReady() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onReceivedFilterList(filterList: List&lt;FilterCategoryData&gt;?) {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onErrorFilterList(error: String?) {\n        TODO(\"Not yet implemented\")\n    }\n\n    /* RendererStateListener \uc778\ud130\ud398\uc774\uc2a4 \uba54\uc18c\ub4dc \uad6c\ud604 */\n    override fun onLocalPreparing() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onLocalFirstFrameRendered() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onLocalStateChanged(state: RendererState) {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onRemotePreparing() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onRemoteFirstFrameRendered() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onRemoteStateChanged(state: RendererState) {\n        TODO(\"Not yet implemented\")\n    }\n}\n</code></pre>"},{"location":"sdk/android/","title":"LiveStyler SDK for Android","text":"<p>Android\uc6a9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 LiveStyler \uae30\ub2a5\uc744 \uc801\uc6a9\ud558\uae30 \uc704\ud55c SDK\uc785\ub2c8\ub2e4. SDK\ub294 \uce74\uba54\ub77c\ub97c \ucd08\uae30\ud654\ud558\uc5ec \ucd2c\uc601\ub41c \uc601\uc0c1\uc744 \uc804\uc1a1\ud558\uace0 \uc601\uc0c1\ucc98\ub9ac\uac00 \uc644\ub8cc\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0\ud558\uc5ec \ubcf4\uc5ec\uc8fc\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"sdk/android/#_1","title":"\uc2dc\uc791\ud558\uae30","text":""},{"location":"sdk/android/#_2","title":"\uc694\uad6c\uc0ac\ud56d","text":"<ul> <li>Android 9.0 \uc774\uc0c1</li> <li>AGP 8.0 \uc774\uc0c1</li> <li>Kotlin 1.7.21 \uc774\uc0c1</li> </ul>"},{"location":"sdk/android/#_3","title":"\uc8fc\uc694\uae30\ub2a5","text":"<ul> <li>\uc2dc\uadf8\ub110 \ucc44\ub110\uc744 \ud1b5\ud55c \uc601\uc0c1 \ubcc0\ud658\uc744 \uc81c\uc5b4</li> <li>\uce74\uba54\ub77c\uc758 \uc601\uc0c1\uc744 WebRTC \uc11c\ubc84\ub85c \uc804\uc1a1</li> <li>\ud544\ud130\uac00 \uc801\uc6a9\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0</li> </ul>"},{"location":"sdk/android/#_4","title":"\uc124\uce58","text":""},{"location":"sdk/android/#gradle","title":"Gradle","text":"<pre><code>// root/build.gradle\nallprojects {\n    repositories {\n        ...\n        maven {\n            url = uri(\"https://maven.pkg.github.com/dob-world/livestyler-sdk-android\")\n            credentials {\n                username = System.getenv(\"GITHUB_USERNAME\") ?: \"{username}\"\n                password = System.getenv(\"GITHUB_TOKEN\") ?: \"{PAT}\"\n            }\n        }\n        ...\n    }\n}\n</code></pre> <ul> <li><code>username</code>: Github \uc0ac\uc6a9\uc790 \uacc4\uc815</li> <li><code>PAT</code>: Github Personal Access Token</li> </ul> <pre><code>// app/build.gradle\ndependencies {\n    implementation \"ai.livestyler:livestyler-sdk-android:latest.release\"\n}\n</code></pre> <p>\uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4:</p> <pre><code>$ ./gradlew build --refresh-dependencies\n</code></pre>"},{"location":"sdk/android/#_5","title":"\uc0ac\uc6a9\ubc29\ubc95","text":""},{"location":"sdk/android/#_6","title":"\uc26c\uc6b4 \uc0ac\uc6a9","text":"<p>\uae30\ub2a5\uc774 \uc0ac\uc804\uc5d0 \uad6c\ud604\ub41c <code>StreamFragment</code> \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>// \ucd08\uae30\ud654\nval args = Bundle().apply {\n    putString(\"credential\", \"{credential}\")                             // \uad00\ub9ac\uc790 \ud398\uc774\uc9c0\ub97c \ud1b5\ud574 \ubc1c\uae09 \ubc1b\uc740 \uc778\uc99d \ud1a0\ud070\n    putString(\"apiEndpoint\", \"{apiEndpoint}\")                           // \uc11c\ube44\uc2a4\uc758 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 API \uc11c\ubc84\n    putString(\"signalEndpoint\", \"{signalEndpoint}\")                     // \ubc31\uc5d4\ub4dc\uc640 \uc778\uc99d \uc815\ubcf4\ub97c \uc8fc\uace0 \ubc1b\ub294 \uc2dc\uadf8\ub110 \ucc44\ub110 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc8fc\uc18c\n    putParcelableArrayList(\n        \"serverEndpoints\",                                              // STUN \uc11c\ubc84\uc640 TURN \uc11c\ubc84\ub97c \uc124\uc815, STUN \uc11c\ubc84\ub294 \uc81c\uacf5\ub41c \uad6c\uae00 STUN \uc0ac\uc6a9 \uad8c\uc7a5\n        arrayListOf(\n            Bundle().apply {\n                putString(\"type\", \"stun\")\n                putString(\"endpoint\", \"stun:stun.l.google.com:19302\")   // STUN \uc11c\ubc84 \uc8fc\uc18c\n            },\n            Bundle().apply {\n                putString(\"type\", \"turn\")\n                putString(\"endpoint\", \"{turnEndpoint}\")                 // TURN \uc11c\ubc84 \uc8fc\uc18c\n                putString(\"username\", \"{username}\")                     // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n                putString(\"password\", \"{password}\")                     // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n            },\n            Bundle().apply {\n                putString(\"type\", \"turn\")\n                putString(\"endpoint\", \"{turnEndpoint}\")                 // TURN \uc11c\ubc84 \uc8fc\uc18c\n                putString(\"username\", \"{username}\")                     // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n                putString(\"secret\", \"{secret}\")                         // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n            }\n        )\n    )\n    putString(\"iceTransportsType\", \"{iceTransportsType}\")           // All, NoHost, Relay \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec Peep-to-peer \uc5f0\uacb0 \ubc29\uc2dd\uc744 \uc9c0\uc815\n}\n\nfindNavController().navigate(R.id.action_HostFragment_to_StreamFragment, args = args)\n</code></pre>"},{"location":"sdk/android/#_7","title":"\uc9c1\uc811 \uac1c\ubc1c","text":"<p>\uc26c\uc6b4 \uc0ac\uc6a9\uc5d0\uc11c\ub294 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \ucd94\uac00\uc801\uc778 \uae30\ub2a5, UI/UX\uc758 \uc784\uc758 \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub294 \uc9c1\uc811 \uad6c\ud604\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.</p> <p>\uc0ac\uc6a9 \ubc29\ubc95\uc740 \ud6c4\uc220\ud560 \uc8fc\uc694 \uae30\ub2a5 \uba85\uc138\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p> <p>\ud654\uba74\uc758 \ub514\uc790\uc778\uacfc \uae30\ub2a5\uc744 \ubcc0\uacbd\ud558\uace0\uc790 \ud558\uba74 <code>StreamFragment.kt</code> \ud30c\uc77c\uacfc <code>fragment_stream.xml</code> \ud30c\uc77c\uc744 \ucc38\uace0\ud558\uc5ec \uc0ac\uc6a9\ud558\uc138\uc694.</p> <p>\uc138\ubd80\uc801\uc778 API \uba85\uc138\ub294 Android APIs\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p>"},{"location":"sdk/android/#_8","title":"\uc8fc\uc694 \uae30\ub2a5 \uba85\uc138","text":"<p>API\ub97c \uc0ac\uc6a9\ud558\uba74 \ud654\uba74\uc758 \uae30\ub2a5\uc744 \uc9c1\uc811 \ub9cc\ub4e4\uc5b4 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"sdk/android/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>// \ucd08\uae30\ud654\n// accessKey, signalEndpoint, serverEndpoints\ub294 args\ub97c \ub9cc\ub4e4\ub54c \uc0ac\uc6a9\ud55c \uac12\uacfc \uac19\uc740 \uac12\uc744 \uc0ac\uc6a9\nval liveStylerManager: LiveStylerManager = LiveStylerManager(\n    \"{credential}\",\n    \"{apiEndpoint}\",\n    \"{signalEndpoint}\",\n    listOf( {serverEndpoints} ),\n\u2003\u2003\u2003\u2003\"{iceTransportsType}\"\n)\n</code></pre>"},{"location":"sdk/android/#oncreate","title":"onCreate()","text":"<p>\ucd08\uae30\ud654\uac00 \ub420 \ub54c \ud544\uc694\ud55c \uc791\uc5c5\uc774 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</p> <pre><code>override fun onCreate(saveInstance?: Bundle) {\n    super.onCreate(saveInstance)\n    liveStyleManager.onCreate(requrieContext(), this)\n}\n</code></pre>"},{"location":"sdk/android/#oncreateview","title":"onCreateView()","text":"<p>\ubdf0\uac00 \uc0dd\uc131\ub418\uae30 \uc804\uc5d0 \ud544\uc694\ud55c \uc791\uc5c5\uc774 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</p> <pre><code>override fun onCreateView(\n    inflater: LayoutInflater, container: ViewGroup?,\n    savedInstanceState: Bundle?\n): View {\n    _binding = FragmentStreamBinding.inflate(inflater, container, false)\n    liveStylerManager.onCreateView(this, this)\n    return binding.root\n}\n</code></pre>"},{"location":"sdk/android/#onviewcreated","title":"onViewCreated()","text":"<p>\ub9cc\ub4e4\uc5b4\uc9c4 \ubdf0\ub97c \ub9e4\ub2c8\uc800\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. \uce74\uba54\ub77c \ud504\ub9ac\ubdf0 \ub610\ub294 \ub80c\ub354 \ud504\ub9ac\ubdf0\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \ub123\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    liveStylerManager.onViewCreated(binding.preview, binding.renderView)\n}\n</code></pre>"},{"location":"sdk/android/#onpause","title":"onPause()","text":"<p>\uce74\uba54\ub77c \ucea1\ucc98\ub97c \uc911\ub2e8\ud569\ub2c8\ub2e4.</p> <pre><code>override fun onPause() {\n    super.onPause()\n    liveStylerManager.onPause()\n}\n</code></pre>"},{"location":"sdk/android/#onresume","title":"onResume()","text":"<p>\uce74\uba54\ub77c \ucea1\ucc98\ub97c \ub2e4\uc2dc \uc2dc\uc791\ud569\ub2c8\ub2e4. \uc2dc\uadf8\ub110 \uc11c\ubc84 \uc5f0\uacb0 \ubc0f WebRTC \uc5f0\uacb0\uc744 \ub2e4\uc2dc \uc124\uc815\ud569\ub2c8\ub2e4.</p> <pre><code>override fun onResume() {\n    super.onResume()\n    liveStylerManager.onResume()\n}\n</code></pre>"},{"location":"sdk/android/#onstop","title":"onStop()","text":"<p>\uce74\uba54\ub77c \ub9ac\uc18c\uc2a4\ub97c \ub9b4\ub9ac\uc988 \ubc18\ud658\ud569\ub2c8\ub2e4. \uc2dc\uadf8\ub110 \uc11c\ubc84\uc640 WebRTC \uc5f0\uacb0\uc744 \ub04a\uace0 \ub300\uae30\ud569\ub2c8\ub2e4.</p> <pre><code>override fun onStop() {\n    liveStylerManager.onStop()\n    super.onStop()\n}\n</code></pre>"},{"location":"sdk/android/#ondestroy","title":"onDestroy()","text":"<p>\uc2dc\uadf8\ub110 \uc11c\ubc84 \uc5f0\uacb0\uacfc WebRTC \uc5f0\uacb0\uc744 \uc644\uc804\ud788 \uc885\ub8cc\ud569\ub2c8\ub2e4.</p> <pre><code>override fun onDestroyView() {\n    liveStylerManager.onDestroy()\n    _binding = null\n    super.onDestroyView()\n}\n</code></pre>"},{"location":"sdk/android/#changefilterstring","title":"changeFilter(String)","text":"<p>WebRTC \uc11c\ubc84\uc5d0 \uc124\uc815\ub41c \ud544\ud130\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4.</p> <pre><code>liveStylerManager.changeFilter(\"{filter_id}\")\n</code></pre> <ul> <li>filter_id: API\ub97c \ud1b5\ud574 \uc804\ub2ec \ubc1b\uc740 \ud544\ud130 \ub9ac\uc2a4\ud2b8 \uc911\uc5d0 \ubcc0\uacbd\uc744 \uc6d0\ud558\ub294 \ud544\ud130\uc758 ID</li> </ul>"},{"location":"sdk/android/#switchcamerastring","title":"switchCamera(String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \uce74\uba54\ub77c ID\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. \uce74\uba54\ub77c ID\ub294 CameraManager\ub97c \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>liveStylerManager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li>camera_id: CamaraManager(\uc548\ub4dc\ub85c\uc774\ub4dc \uc2dc\uc2a4\ud15c \ub3c4\uad6c)\ub97c \ud1b5\ud574 \uc5bb\uc740 \uce74\uba54\ub77c\uc758 ID</li> </ul>"},{"location":"sdk/android/#updatefiltercategory","title":"updateFilterCategory()","text":"<p>API \uc11c\ubc84\uc5d0\uc11c \ud544\ud130, \uce74\ud14c\uace0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc0c8\ub85c \ubc1b\uc544 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. \ud544\ud130 \ub9ac\uc2a4\ud2b8\ub294 \uc2dc\uadf8\ub110 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub429\ub2c8\ub2e4. \uac31\uc2e0\ub41c \ub9ac\uc2a4\ud2b8\ub294 SignalStateListener\ub97c \ud1b5\ud574 \uc804\ub2ec\ub429\ub2c8\ub2e4.</p> <pre><code>liveStylerManager.updateFilterCategory()\n</code></pre>"},{"location":"sdk/android/#changemodelstring","title":"changeModel(String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \ubaa8\ub378 \uc774\ub984\uc73c\ub85c \ud544\ud130 \ubaa8\ub378\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4. \ubaa8\ub378 \uc774\ub984\uc740 onReceivedFilterList() \ucf5c\ubc31\uc744 \ud1b5\ud574 \uc5bb\uc740 \ud544\ud130\uc758 \uc815\ubcf4(FilterCategoryData)\uc5d0\uc11c \ubaa8\ub378 \uc774\ub984\uc744 \ucc3e\uc544\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</p> <pre><code>liveStylerManager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li>model_name: FilterCategoryData\uc758 \ubaa8\ub378 \uc774\ub984</li> </ul> <p>Android SDK\uc5d0\ub294 API\ub97c \ud1b5\ud574 \ubaa8\ub378 \ub9ac\uc2a4\ud2b8\ub97c \uac00\uc838\uc624\ub294 \ucc98\ub9ac\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, SDK\uc5d0 \ubc18\uc601\ub41c API\ub294 LiveStyler \uc81c\uacf5 \uc11c\ube44\uc2a4\uc774\ubbc0\ub85c \uc2e4\uc81c \uc11c\ube44\uc2a4\uc640 \ucc28\uc774\uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. API\ub294 \uc11c\ube44\uc2a4\uc758 \uad6c\uc131\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c API \uac00\uc774\ub4dc\ub97c \ucc38\uace0\ud558\uc5ec \ubaa8\ub378 \ub9ac\uc2a4\ud2b8\ub97c \ud655\uc778\ud558\uc5ec \uc0ac\uc6a9\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p>"},{"location":"sdk/flutter-streampagedart-web/","title":"stream_page.dart \uc18c\uc2a4\ucf54\ub4dc","text":"<pre><code>import 'dart:async';\nimport 'dart:html' as html;\nimport 'dart:js' as js;\nimport 'dart:math';\nimport 'dart:ui';\n\nimport 'package:cached_network_image/cached_network_image.dart';\nimport 'package:easy_localization/easy_localization.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_svg/flutter_svg.dart';\nimport 'package:flutter_webrtc/flutter_webrtc.dart';\nimport 'package:livestyler_web_demo/data/settings.dart';\nimport 'package:livestyler_web_demo/main.dart';\nimport 'package:livestyler_web_demo/sdk/data/filter_category_data.dart';\nimport 'package:livestyler_web_demo/sdk/livestyler_manager.dart';\nimport 'package:livestyler_web_demo/sdk/signal/signal_state_listener.dart';\nimport 'package:livestyler_web_demo/sdk/stream/data_channel_listener.dart';\nimport 'package:livestyler_web_demo/sdk/stream/stream_stats_data.dart';\nimport 'package:livestyler_web_demo/sdk/stream/stun_turn_server.dart';\nimport 'package:livestyler_web_demo/sdk/util/layout_support.dart';\n\n/// \uc2e4\uc2dc\uac04 \uc2a4\ud2b8\ub9ac\ubc0d\uacfc \ud544\ud130 \uc801\uc6a9\uc744 \ub2f4\ub2f9\ud558\ub294 \ud398\uc774\uc9c0\nclass StreamPage extends StatefulWidget {\n  final _id = Random().nextInt(2^256);\n\n  StreamPage({super.key, this.showTopbarControl = false});\n\n  final bool showTopbarControl;\n\n  @override\n  State&lt;StreamPage&gt; createState() =&gt; _StreamPageState();\n}\n\n/// StreamPage\uc758 \uc0c1\ud0dc\ub97c \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4\n/// SignalStateListener\uc640 DataChannelStateListener\ub97c \uad6c\ud604\ud558\uc5ec \ud1b5\uc2e0 \uc0c1\ud0dc\ub97c \ubaa8\ub2c8\ud130\ub9c1\nclass _StreamPageState extends State&lt;StreamPage&gt; with SingleTickerProviderStateMixin implements SignalStateListener, DataChannelStateListener {\n  // UI \ucef4\ud3ec\ub10c\ud2b8\uc758 GlobalKey\ub4e4\n  final _topAreaKey = GlobalKey();\n  final _topLogoKey = GlobalKey();\n  final _topTimerKey = GlobalKey();\n  final _stylePanelKey = GlobalKey();\n  final _styleCategoryKey = GlobalKey();\n  final _styleModelKey = GlobalKey();\n  final _stylePanelBackwardKey = GlobalKey();\n  final _stylePanelForwardKey = GlobalKey();\n\n  // WebRTC \ube44\ub514\uc624 \ub80c\ub354\ub7ec\n  final _localRenderer = RTCVideoRenderer();\n  final _remoteRenderer = RTCVideoRenderer();\n\n  final _previewKey = GlobalKey();\n  final _remoteKey = GlobalKey();\n\n  final _previewContainerKey = GlobalKey();\n  final ValueNotifier&lt;bool&gt; _showPreview = ValueNotifier(false);\n\n  // LiveStyler \uad00\ub9ac\uc790 \ubc0f \ud1b5\uacc4 \ub370\uc774\ud130\n  late LiveStylerManager _liveStylerManager;\n\n  // \ud544\ud130 \uad00\ub828 \uc0c1\ud0dc\n  final ValueNotifier&lt;List&lt;FilterCategoryData&gt;&gt; _filterCategoryList = ValueNotifier([]);\n  final ValueNotifier&lt;int&gt; _selectedCategoryIndex = ValueNotifier(0);\n  final ValueNotifier&lt;String?&gt; _selectedModelName = ValueNotifier('romatic');\n\n  @override\n  void initState() {\n    super.initState();\n    _initManager();\n  }\n\n  /// LiveStyler \ub9e4\ub2c8\uc800\ub97c \ucd08\uae30\ud654\ud558\uace0 \uc124\uc815\n  void _initManager() {\n    _liveStylerManager = LiveStylerManager(\n      credential: AppEnv.credential,\n      apiEndpoint: AppEnv.apiEndpoint,\n      signalEndpoint: AppEnv.signalEndpoint,\n      iceServerList: AppEnv.iceServers.map((server) {\n        return StunTurnServer(\n          endpoint: server['endpoint'] ?? '',\n          username: server['username'],\n          password: server['password'],\n          secret: server['secret'],\n        );\n      }).toList(),\n      iceTransportsType: iceTransportsTypeRelay,\n      localRenderer: _localRenderer,\n      remoteRenderer: _remoteRenderer,\n      signalStateListener: this,\n      rendererStateListener: null,\n      dataChannelStateListener: this,\n    );\n    _liveStylerManager.initialize();\n    _liveStylerManager.updateFilterCategory();\n  }\n\n  @override\n  void dispose() {\n    _liveStylerManager.release();\n    super.dispose();\n  }\n\n  /// \uc0c1\ub2e8 \uc601\uc5ed (\ub85c\uace0 \ubc0f \ud0c0\uc774\uba38) UI \uad6c\uc131\n  Widget _topArea(BuildContext context, Size screenSize) {\n    final layoutKind = screenSize.width.layoutKind;\n\n    // \ub808\uc774\uc544\uc6c3 \uc885\ub958\uc5d0 \ub530\ub978 \ud06c\uae30 \ubc0f \ud328\ub529 \uc124\uc815\n    late double layoutHeight;\n    late EdgeInsets padding;\n    late Size logoSize;\n    switch (layoutKind) {\n      case LayoutKind.nowSupported:\n      case LayoutKind.smallScreen:\n      case LayoutKind.mobile:\n        layoutHeight = 72;\n        padding = const EdgeInsets.symmetric(horizontal: 25, vertical: 16);\n        logoSize = const Size(178, 28);\n        break;\n      case LayoutKind.tablet:\n        layoutHeight = 84;\n        padding = const EdgeInsets.symmetric(horizontal: 32, vertical: 20);\n        logoSize = const Size(240, 35);\n        break;\n      case LayoutKind.desktop:\n      case LayoutKind.largeDesktop:\n        layoutHeight = 90;\n        padding = const EdgeInsets.symmetric(horizontal: 106, vertical: 23);\n        logoSize = const Size(240, 35);\n        break;\n    }\n\n    return AnimatedContainer(\n      key: _topAreaKey,\n      duration: const Duration(milliseconds: 250),\n      width: double.infinity,\n      height: layoutHeight,\n      decoration: const BoxDecoration(\n        gradient: LinearGradient(\n          colors: [\n            Color(0xff000000),\n            Color(0x00000000),\n          ],\n          begin: Alignment.topCenter,\n          end: Alignment.bottomCenter,\n        ),\n      ),\n      clipBehavior: Clip.hardEdge,\n      padding: padding,\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.start,\n        crossAxisAlignment: CrossAxisAlignment.center,\n        children: [\n          Expanded(\n            flex: 0,\n            child: SizedBox(\n              width: logoSize.width,\n              height: logoSize.height,\n              child: SvgPicture.asset(\n                'images/svg/ic_top_area_logo.svg',\n                key: _topLogoKey,\n                width: logoSize.width,\n                height: logoSize.height,\n              ),\n            ),\n          ),\n          const Spacer(),\n        ]\n      ),\n    );\n  }\n\n  /// \uc2a4\ud0c0\uc77c \ud328\ub110 (\ud544\ud130 \uce74\ud14c\uace0\ub9ac \ubc0f \ubaa8\ub378 \uc120\ud0dd) UI \uad6c\uc131\n  Widget _stylePanel(BuildContext context, Size screenSize) {\n    final layoutKind = screenSize.width.layoutKind;\n\n    // \ub808\uc774\uc544\uc6c3 \uc885\ub958\uc5d0 \ub530\ub978 \uc2a4\ud0c0\uc77c \ud328\ub110 \uc124\uc815\n    late EdgeInsets stylePanelMargin;\n    late BoxDecoration stylePanelDecoration;\n    late BoxConstraints stylePanelConstraints;\n    const stylePanelHeight = 194.0;\n    switch (layoutKind) {\n      case LayoutKind.nowSupported:\n      case LayoutKind.smallScreen:\n      case LayoutKind.mobile:\n        stylePanelMargin = EdgeInsets.zero;\n        stylePanelDecoration = BoxDecoration(\n          border: Border.all(\n            width: 1,\n            color: const Color(0xff373444),\n            style: BorderStyle.solid,\n          ),\n          gradient: const LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xff1A1822),\n              Color(0xff0A090D),\n            ],\n          ),\n        );\n        stylePanelConstraints = BoxConstraints(\n          minWidth: screenSize.width,\n          maxWidth: screenSize.width,\n          minHeight: 194,\n          maxHeight: 194,\n        );\n        break;\n      case LayoutKind.tablet:\n        stylePanelMargin = const EdgeInsets.symmetric(horizontal: 75, vertical: 24);\n        stylePanelDecoration = BoxDecoration(\n          borderRadius: const BorderRadius.all(Radius.circular(16)),\n          border: Border.all(\n            width: 1,\n            color: const Color(0xff373444),\n            style: BorderStyle.solid,\n          ),\n          gradient: const LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xff1A1822),\n              Color(0xff0A090D),\n            ],\n          ),\n        );\n        stylePanelConstraints = const BoxConstraints(\n          maxWidth: 659,\n          minHeight: 194,\n          maxHeight: 194,\n        );\n        break;\n      case LayoutKind.desktop:\n      case LayoutKind.largeDesktop:\n        stylePanelMargin = const EdgeInsets.symmetric(horizontal: 75, vertical: 24);\n        stylePanelDecoration = BoxDecoration(\n          borderRadius: const BorderRadius.all(Radius.circular(16)),\n          border: Border.all(\n            width: 1,\n            color: const Color(0xff373444),\n            style: BorderStyle.solid,\n          ),\n          gradient: const LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xff1A1822),\n              Color(0xff0A090D),\n            ],\n          ),\n        );\n        stylePanelConstraints = const BoxConstraints(\n          maxWidth: 824,\n          minHeight: 194,\n          maxHeight: 194,\n        );\n        break;\n    }\n\n    return ValueListenableBuilder&lt;List&lt;FilterCategoryData&gt;&gt;(\n      valueListenable: _filterCategoryList,\n      builder: (context, filterCategoryList, child) {\n        if (filterCategoryList.isEmpty) {\n          return AnimatedContainer(\n            key: _stylePanelKey,\n            duration: const Duration(milliseconds: 250),\n            margin: stylePanelMargin,\n            height: stylePanelHeight,\n            constraints: stylePanelConstraints,\n            decoration: stylePanelDecoration,\n            clipBehavior: Clip.hardEdge,\n            child: const Center(\n              child: Text(\n                'Loading...',\n                style: TextStyle(\n                  color: Color(0xffD8DBE5),\n                  fontWeight: FontWeight.w500,\n                  fontSize: 14,\n                  height: 1,\n                  letterSpacing: 0,\n                ),\n                textAlign: TextAlign.center,\n              ),\n            ),\n          );\n        } else {\n          return AnimatedContainer(\n            key: _stylePanelKey,\n            duration: const Duration(milliseconds: 250),\n            margin: stylePanelMargin,\n            height: stylePanelHeight,\n            constraints: stylePanelConstraints,\n            decoration: stylePanelDecoration,\n            clipBehavior: Clip.hardEdge,\n            child: ValueListenableBuilder&lt;int&gt;(\n              valueListenable: _selectedCategoryIndex,\n              builder: (context, selectedCategoryIndex, child) {\n                final selectedCategoryData = filterCategoryList[selectedCategoryIndex];\n\n                return SizedBox.expand(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.start,\n                    crossAxisAlignment: CrossAxisAlignment.stretch,\n                    children: [\n                      Expanded(\n                        flex: 52,\n                        child: ListView.builder(\n                          key: _styleCategoryKey,\n                          scrollDirection: Axis.horizontal,\n                          padding: const EdgeInsets.only(\n                            left: 16,\n                            top: 12,\n                            right: 16,\n                            bottom: 4,\n                          ),\n                          itemCount: filterCategoryList.length,\n                          itemBuilder: (context, index) {\n                            final categoryData = filterCategoryList[index];\n                            return _StyleHeaderItemWidget(\n                              categoryData: categoryData,\n                              index: index,\n                              selectedCategoryIndex: selectedCategoryIndex,\n                              selectedCategoryIndexNotifier: _selectedCategoryIndex,\n                            );\n                          },\n                        ),\n                      ),\n                      Expanded(\n                        flex: 142,\n                        child: ValueListenableBuilder&lt;String?&gt;(\n                          valueListenable: _selectedModelName,\n                          builder: (context, selectedModelName, child) {\n                            return ListView.builder(\n                              key: _styleModelKey,\n                              scrollDirection: Axis.horizontal,\n                              padding: const EdgeInsets.only(\n                                left: 16,\n                                top: 4,\n                                right: 16,\n                                bottom: 16,\n                              ),\n                              itemCount: selectedCategoryData.filters.length,\n                              itemBuilder: (context, index) {\n                                final filterData = selectedCategoryData.filters[index];\n                                return _StyleModelItemWidget(\n                                  filterData: filterData,\n                                  index: index,\n                                  selectedModelName: selectedModelName,\n                                  onSelectedModel: (modelName) {\n                                    _liveStylerManager.changeModel(modelName);\n                                    _selectedModelName.value = modelName;\n                                    html.window.sessionStorage['selected_model_name'] = modelName;\n                                  },\n                                );\n                              },\n                            );\n                          },\n                        ),\n                      ),\n                    ],\n                  ),\n                );\n              },\n            ),\n          );\n        }\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final windowSize = MediaQuery.of(context).size;\n    final maxSize = max(windowSize.width, windowSize.height);\n    final maxWidth = max(maxSize / 4, 320.0);\n    final maxHeight = maxWidth / 16 * 9;\n\n    return Scaffold(\n      appBar: widget.showTopbarControl ? AppBar(\n        actions: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.start,\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              Text(\n                'Reload',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                  fontWeight: FontWeight.w700,\n                  color: Colors.white,\n                ),\n              ),\n              const SizedBox(\n                width: 8,\n              ),\n              IconButton(\n                icon: const Icon(Icons.refresh_rounded),\n                onPressed: () {\n                  Navigator.of(context).pushReplacementNamed('/stream');\n                },\n              ),\n            ],\n          ),\n          const SizedBox(\n            width: 32,\n          ),\n          ValueListenableBuilder&lt;bool&gt;(\n            valueListenable: _showPreview,\n            builder: (context, isShow, child) {\n              return Row(\n                mainAxisAlignment: MainAxisAlignment.start,\n                crossAxisAlignment: CrossAxisAlignment.center,\n                children: [\n                  Text(\n                    'Preview',\n                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w700,\n                      color: Colors.white,\n                    ),\n                  ),\n                  const SizedBox(\n                    width: 8,\n                  ),\n                  Text(\n                    'Off',\n                    style: Theme.of(context).textTheme.labelSmall?.copyWith(\n                      fontWeight: FontWeight.w700,\n                      color: Colors.white54,\n                    ),\n                  ),\n                  Switch.adaptive(\n                    value: isShow,\n                    onChanged: (value) {\n                      _showPreview.value = value;\n                    },\n                  ),\n                  Text(\n                    'On',\n                    style: Theme.of(context).textTheme.labelSmall?.copyWith(\n                      fontWeight: FontWeight.w700,\n                      color: Colors.white,\n                    ),\n                  )\n                ],\n              );\n            },\n          ),\n          const SizedBox(\n            width: 32,\n          ),\n        ],\n      ) : null,\n      body: SizedBox.expand(\n        child: ValueListenableBuilder&lt;ServerState&gt;(\n          valueListenable: _liveStylerManager,\n          builder: (context, serverState, child) {\n            switch (serverState) {\n              case ServerState.connected:\n                _startRunning();\n                break;\n              default:\n                _stopRunning();\n                break;\n            }\n\n            return Stack(\n              children: [\n                SizedBox.expand(\n                  child: Container(\n                    color: Colors.black,\n                    child: RTCVideoView(\n                      key: _remoteKey,\n                      _remoteRenderer,\n                      filterQuality: FilterQuality.high,\n                      objectFit: RTCVideoViewObjectFit.RTCVideoViewObjectFitCover,\n                      placeholderBuilder: (context) {\n                        return Container(\n                          color: const Color(0xff191624),\n                          alignment: Alignment.center,\n                          child: SizedBox(\n                            width: 104,\n                            height: 104,\n                            child: SvgPicture.asset(\n                              'images/svg/ic_tabler_video-off.svg',\n                              width: 104,\n                              height: 104,\n                            ),\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                ),\n                Positioned(\n                  left: 80,\n                  top: 32 + 32.5 + 32,\n                  right: 80,\n                  bottom: 32,\n                  child: Align(\n                    alignment: Alignment.topLeft,\n                    child: ValueListenableBuilder&lt;bool&gt;(\n                      valueListenable: _showPreview,\n                      builder: (context, isShow, child) {\n                        return Opacity(\n                          key: _previewContainerKey,\n                          opacity: isShow ? 1 : 0,\n                          child: Container(\n                            width: maxWidth,\n                            height: maxHeight,\n                            decoration: BoxDecoration(\n                              color: Colors.white,\n                              border: Border.all(color: Colors.white, width: 2),\n                            ),\n                            child: RTCVideoView(\n                              key: _previewKey,\n                              _localRenderer,\n                            ),\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                ),\n\n                // top area\n                Positioned(\n                  child: Align(\n                    alignment: Alignment.topCenter,\n                    child: _topArea(context, windowSize),\n                  ),\n                ),\n\n                // style panel\n                Positioned(\n                  child: Align(\n                    alignment: Alignment.bottomCenter,\n                    child: _stylePanel(context, windowSize),\n                  ),\n                ),\n              ],\n            );\n          },\n        ),\n      ),\n    );\n  }\n\n  // SignalStateListener \uad6c\ud604\n  @override\n  void onServerPreparing() {\n    // \uc11c\ubc84 \uc900\ube44 \uc911 \uc0c1\ud0dc \ucc98\ub9ac\n  }\n\n  @override\n  void onServerReady() {\n    // \uc11c\ubc84 \uc900\ube44 \uc644\ub8cc \uc0c1\ud0dc \ucc98\ub9ac\n  }\n\n  @override\n  void onReceivedFilterList(List&lt;FilterCategoryData&gt; filterList) {\n    debugPrint('[SignalStateListener] onReceivedFilterList $filterList');\n    _filterCategoryList.value = filterList;\n  }\n\n  @override\n  void onErrorFilterList(String? error) {\n    // \ud544\ud130 \ubaa9\ub85d \ub85c\ub4dc \uc624\ub958 \ucc98\ub9ac\n  }\n\n  // DataChannelStateListener \uad6c\ud604\n  @override\n  void onBufferedAmountChange(int previousAmount) {\n    // \ub370\uc774\ud130 \ucc44\ub110 \ubc84\ud37c \uc591 \ubcc0\uacbd \ucc98\ub9ac\n  }\n\n  @override\n  void onDataChannelMessage(RTCDataChannel? dataChannel, String? message) {\n    // \ub370\uc774\ud130 \ucc44\ub110 \uba54\uc2dc\uc9c0 \uc218\uc2e0 \ucc98\ub9ac\n  }\n\n  @override\n  void onDataChannelStateChange(RTCDataChannelState state) {\n    debugPrint('[DataChannelStateListener] onDataChannelStateChange $state');\n    // \ub370\uc774\ud130 \ucc44\ub110\uc774 \uc5f4\ub9ac\uba74 \ucd5c\uadfc \uc120\ud0dd\ub41c \ubaa8\ub378 \uc801\uc6a9\n    if (state == RTCDataChannelState.RTCDataChannelOpen) {\n      final recentlyModelName = html.window.sessionStorage['selected_model_name'] ?? 'romantic';\n      _liveStylerManager.changeModel(recentlyModelName);\n    }\n  }\n}\n\n/// \ud544\ud130 \uce74\ud14c\uace0\ub9ac \ud5e4\ub354 \uc544\uc774\ud15c \uc704\uc82f\nclass _StyleHeaderItemWidget extends StatelessWidget {\n  final FilterCategoryData categoryData;\n  final int index;\n  final int selectedCategoryIndex;\n  final ValueNotifier&lt;int&gt; selectedCategoryIndexNotifier;\n\n  const _StyleHeaderItemWidget({\n    super.key,\n    required this.categoryData,\n    required this.index,\n    required this.selectedCategoryIndex,\n    required this.selectedCategoryIndexNotifier,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: 80,\n      height: 36,\n      decoration: BoxDecoration(\n        color:\n            (index == selectedCategoryIndex) ? const Color(0xff2C2938) : null,\n        borderRadius: const BorderRadius.all(Radius.circular(10)),\n      ),\n      clipBehavior: Clip.hardEdge,\n      child: Material(\n        color: Colors.transparent,\n        child: InkWell(\n          onTap: () {\n            selectedCategoryIndexNotifier.value = index;\n          },\n          child: Padding(\n            padding: const EdgeInsets.all(2),\n            child: FittedBox(\n              fit: BoxFit.scaleDown,\n              child: Text(\n                EasyLocalization.of(context)?.locale.languageCode.startsWith('ko') == true ? categoryData.nameKo : categoryData.nameEn,\n                style: TextStyle(\n                  color: (index == selectedCategoryIndex) ? Colors.white : Colors.white54,\n                  fontWeight: FontWeight.w500,\n                  fontSize: 16,\n                  height: 16 / 20,\n                  letterSpacing: 0,\n                ),\n                textAlign: TextAlign.center,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n/// \ud544\ud130 \ubaa8\ub378 \uc544\uc774\ud15c \uc704\uc82f\nclass _StyleModelItemWidget extends StatelessWidget {\n  final FilterItemData filterData;\n  final int index;\n  final String? selectedModelName;\n  final void Function(String modelName)? onSelectedModel;\n\n  const _StyleModelItemWidget({\n    super.key,\n    required this.filterData,\n    required this.index,\n    required this.selectedModelName,\n    required this.onSelectedModel,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      color: Colors.transparent,\n      child: InkWell(\n        onTap: () {\n          onSelectedModel?.call(filterData.code);\n        },\n        child: Container(\n          width: 84,\n          height: 122,\n          padding: const EdgeInsets.only(left: 6, top: 6, right: 6, bottom: 6),\n          decoration: BoxDecoration(\n            color: (filterData.code == selectedModelName) ? const Color(0xff5A5AFF).withOpacity(0.1) : null,\n            borderRadius: const BorderRadius.all(Radius.circular(10)),\n            border: Border.all(\n              color: (filterData.code == selectedModelName) ? const Color(0xff5A5AFF) : Colors.transparent,\n            ),\n          ),\n          clipBehavior: Clip.hardEdge,\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.start,\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: [\n              Expanded(\n                flex: 0,\n                child: Container(\n                  width: 72,\n                  height: 72,\n                  decoration: const BoxDecoration(\n                    borderRadius: BorderRadius.all(Radius.circular(8)),\n                  ),\n                  clipBehavior: Clip.hardEdge,\n                  child: AspectRatio(\n                    aspectRatio: 1,\n                    child: CachedNetworkImage(\n                      imageUrl: filterData.imageUrl,\n                      fit: BoxFit.cover,\n                    ),\n                  ),\n                ),\n              ),\n              const SizedBox(\n                height: 8,\n              ),\n              Expanded(\n                flex: 0,\n                child: FittedBox(\n                  fit: BoxFit.scaleDown,\n                  child: Text(\n                    EasyLocalization.of(context)?.locale.languageCode.startsWith('ko') == true ? filterData.nameKo : filterData.nameEn,\n                    style: TextStyle(\n                      color: (filterData.code == selectedModelName) ? Colors.white : const Color(0xffD8DBE5),\n                      fontWeight: FontWeight.w500,\n                      fontSize: 14,\n                      height: 1,\n                      letterSpacing: 0,\n                    ),\n                    textAlign: TextAlign.center,\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"sdk/flutter-web/","title":"LiveStyler SDK for Flutter Web, Desktop(macOS, Windows)","text":"<p>Flutter CrossPlatfom \uc5d0 LiveStyler \uae30\ub2a5\uc744 \uc801\uc6a9\ud558\uae30 \uc704\ud55c SDK\uc785\ub2c8\ub2e4. SDK\ub294 \uce74\uba54\ub77c\ub97c \ucd08\uae30\ud654\ud558\uc5ec \ucd2c\uc601\ub41c \uc601\uc0c1\uc744 \uc804\uc1a1\ud558\uace0 \uc601\uc0c1\ucc98\ub9ac\uac00 \uc644\ub8cc\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0\ud558\uc5ec \ubcf4\uc5ec\uc8fc\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"sdk/flutter-web/#_1","title":"\uc2dc\uc791\ud558\uae30","text":""},{"location":"sdk/flutter-web/#_2","title":"\uc694\uad6c\uc0ac\ud56d","text":"<ul> <li>Web<ul> <li>Windows 10 \uc774\uc0c1, macOS 13.0 \uc774\uc0c1<ul> <li>Flutter 3.24.5 \uc774\uc0c1</li> <li>Chrome \ube0c\ub77c\uc6b0\uc800 100 \uc774\uc0c1</li> </ul> </li> </ul> </li> <li>Desktop<ul> <li>Windows 10 \uc774\uc0c1<ul> <li>Flutter 3.24.5 \uc774\uc0c1</li> </ul> </li> <li>macOS 13.0 \uc774\uc0c1<ul> <li>Xcode 12.0 \uc774\uc0c1</li> <li>Swift 5.0 \uc774\uc0c1</li> </ul> </li> </ul> </li> </ul>"},{"location":"sdk/flutter-web/#_3","title":"\uc8fc\uc694\uae30\ub2a5","text":"<ul> <li>\uc2dc\uadf8\ub110 \ucc44\ub110\uc744 \ud1b5\ud55c \uc601\uc0c1 \ubcc0\ud658\uc744 \uc81c\uc5b4</li> <li>\uce74\uba54\ub77c\uc758 \uc601\uc0c1\uc744 WebRTC \uc11c\ubc84\ub85c \uc804\uc1a1</li> <li>\ud544\ud130\uac00 \uc801\uc6a9\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0</li> </ul>"},{"location":"sdk/flutter-web/#_4","title":"\uc124\uce58","text":""},{"location":"sdk/flutter-web/#gradle","title":"Gradle","text":"<pre><code># pubspec.yml\n\ndependencies:\n    # \uc800\uc7a5\uc18c \uc900\ube44 \uc911\uc785\ub2c8\ub2e4.\n    livestayler_sdk_flutter_Web:\n        git: https://github.com/dob-world/LiveStylerSDKFlutterWebDesktop.git\n        ref: 0.0.1\n</code></pre> <p>\uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4:</p> <pre><code>$ flutter pub get\n</code></pre>"},{"location":"sdk/flutter-web/#_5","title":"\uc0ac\uc6a9\ubc29\ubc95","text":""},{"location":"sdk/flutter-web/#_6","title":"\uc26c\uc6b4 \uc0ac\uc6a9","text":"<p>\uae30\ub2a5\uc774 \uc0ac\uc804\uc5d0 \uad6c\ud604\ub41c <code>StreamPage</code> \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>// \ud658\uacbd \ucd08\uae30\ud654\nAppEnv.setEnv(\n    '{credential}',\n    '{apiEndpoint}',\n    '{signalEndpoint}',\n    '{iceServers}',\n    '{onTrialStarted}',\n    '{onTrialEnded}',\n    '{language}',\n);\n\n// \ud654\uba74 \uc774\ub3d9\nNavigator.of(context).push(\n    MaterialPageRoute(\n        builder: (context) {\n            return StreamPage();\n        },\n    ),\n);\n</code></pre>"},{"location":"sdk/flutter-web/#_7","title":"\uc9c1\uc811 \uac1c\ubc1c","text":"<p>\uc26c\uc6b4 \uc0ac\uc6a9\uc5d0\uc11c\ub294 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \ucd94\uac00\uc801\uc778 \uae30\ub2a5, UI/UX\uc758 \uc784\uc758 \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub294 \uc9c1\uc811 \uad6c\ud604\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.</p> <p>\uc0ac\uc6a9 \ubc29\ubc95\uc740 \ud6c4\uc220\ud560 \uc8fc\uc694 \uae30\ub2a5 \uba85\uc138\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p> <p>\ud654\uba74\uc758 \ub514\uc790\uc778\uacfc \uae30\ub2a5\uc744 \ubcc0\uacbd\ud558\uace0\uc790 \ud558\uba74 <code>stream_page.dart</code> \ud30c\uc77c\uc744 \ucc38\uace0\ud558\uc5ec \uc0ac\uc6a9\ud558\uc138\uc694.</p> <p>\uc138\ubd80\uc801\uc778 API \uba85\uc138\ub294 Flutter APIs\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p>"},{"location":"sdk/flutter-web/#_8","title":"\uc8fc\uc694 \uae30\ub2a5 \uba85\uc138","text":"<p>API\ub97c \uc0ac\uc6a9\ud558\uba74 \ud654\uba74\uc758 \uae30\ub2a5\uc744 \uc9c1\uc811 \ub9cc\ub4e4\uc5b4 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"sdk/flutter-web/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>_liveStylerManager = LiveStylerManager(\n    credential: '{credential}',\n    apiEndpoint: '{apiEndpoint}',\n    signalEndpoint: '{signalEndpoint}',\n    iceServerList: '{iceServers}',\n    iceTransportsType: 'Relay',\n    localRenderer: {localRenderer},\n    remoteRenderer: {remoteRenderer},\n    signalStateListener: {signalStateListener},\n    rendererStateListener: {rendererStateListener},\n    dataChannelStateListener: {dataChannelStateListener},\n    onReceiveStatsData: {onReceiveStatsData},\n);\n</code></pre> <ul> <li><code>creadential</code>: \uad00\ub9ac\uc790 \ud398\uc774\uc9c0\ub97c \ud1b5\ud574 \ubc1c\uae09 \ubc1b\uc740 \uc778\uc99d \ud1a0\ud070</li> <li><code>apiEndpoint</code>: \uc11c\ube44\uc2a4\uc758 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 API \uc11c\ubc84</li> <li><code>signalEndpoint</code>: \ubc31\uc5d4\ub4dc\uc640 \uc778\uc99d \uc815\ubcf4\ub97c \uc8fc\uace0 \ubc1b\ub294 \uc2dc\uadf8\ub110 \ucc44\ub110 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc8fc\uc18c</li> <li><code>iceServers</code>: STUN \uc11c\ubc84\uc640 TURN \uc11c\ubc84\ub97c \uc124\uc815, STUN \uc11c\ubc84\ub294 \uc81c\uacf5\ub41c \uad6c\uae00 STUN \uc0ac\uc6a9 \uad8c\uc7a5</li> <li><code>iceTransportsType</code>: All, NoHost, Relay \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec Peep-to-peer \uc5f0\uacb0 \ubc29\uc2dd\uc744 \uc9c0\uc815</li> <li><code>localRenderer</code>: WebRTC \uc2a4\ud2b8\ub9bc\uc744 \ub80c\ub354\ub9c1\ud558\ub294 \ub80c\ub354\ub7ec(RTCVideoRenderer)</li> <li><code>remoteRenderer</code>: WebRTC \ub9ac\ubaa8\ud2b8 \uc2a4\ud2b8\ub9bc\uc744 \ub80c\ub354\ub9c1\ud558\ub294 \ub80c\ub354\ub7ec(RTCVideoRenderer)</li> <li><code>signalStateListener</code>: \uc2dc\uadf8\ub110 \ucc44\ub110\uc758 \uc774\ubca4\ud2b8\ub97c \ucc98\ub9ac</li> <li><code>rendererStateListener</code>: \ub80c\ub354\ub7ec\uc758 \uc774\ubca4\ud2b8\ub97c \ucc98\ub9ac</li> <li><code>dataChannelStateListener</code>: \ub370\uc774\ud130 \ucc44\ub110\uc758 \uc774\ubca4\ud2b8\ub97c \ucc98\ub9ac</li> <li><code>onReceiveStatsData</code>: \uc7ac\uc0dd \ud1b5\uacc4\uac00 \uc218\uc2e0\ub418\ub294 \ucf5c\ubc31 \ud568\uc218</li> </ul>"},{"location":"sdk/flutter-web/#initialize","title":"initialize()","text":"<p>\ucd08\uae30\ud654\uac00 \ub420 \ub54c \ud544\uc694\ud55c \uc791\uc5c5\uc774 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</p> <pre><code>@override\nvoid initState() {\n    super.initState();\n    _liveStylerManager.initialize();\n}\n</code></pre>"},{"location":"sdk/flutter-web/#release","title":"release()","text":"<p>\uc2dc\uadf8\ub110 \uc11c\ubc84 \uc5f0\uacb0\uacfc WebRTC \uc5f0\uacb0\uc744 \uc644\uc804\ud788 \uc885\ub8cc\ud558\uace0 \ub9ac\uc18c\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> <pre><code>@override\nvoid dispose() {\n    _liveStylerManager.release();\n    super.dispose();\n}\n</code></pre>"},{"location":"sdk/flutter-web/#updatefiltercategory","title":"updateFilterCategory()","text":"<p>API \uc11c\ubc84\uc5d0\uc11c \ud544\ud130, \uce74\ud14c\uace0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc0c8\ub85c \ubc1b\uc544 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. \ud544\ud130 \ub9ac\uc2a4\ud2b8\ub294 \uc2dc\uadf8\ub110 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub429\ub2c8\ub2e4. \uac31\uc2e0\ub41c \ub9ac\uc2a4\ud2b8\ub294 SignalStateListener\ub97c \ud1b5\ud574 \uc804\ub2ec\ub429\ub2c8\ub2e4.</p> <pre><code>_liveStylerManager.updateFilterCategory();\n</code></pre>"},{"location":"sdk/flutter-web/#switchcamerastring","title":"switchCamera(String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \uce74\uba54\ub77c ID\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. \uce74\uba54\ub77c ID\ub294 CameraManager\ub97c \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>_liveStylerManager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li><code>camera_id</code>: MediaDevices\ub97c \ud1b5\ud574 \uc5bb\uc740 \uce74\uba54\ub77c\uc758 ID</li> </ul>"},{"location":"sdk/flutter-web/#changemodelstring","title":"changeModel(String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \ubaa8\ub378 \uc774\ub984\uc73c\ub85c \ud544\ud130 \ubaa8\ub378\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4.</p> <pre><code>_liveStylerManager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li><code>model_name</code>: FilterCategoryData\uc758 \ubaa8\ub378 \uc774\ub984</li> </ul>"},{"location":"sdk/flutter-web/#appenv","title":"AppEnv","text":"<p>AppEnv \ud074\ub798\uc2a4\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ud658\uacbd \uc124\uc815\uc744 \uad00\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code>// \ud658\uacbd \uc124\uc815\nAppEnv.setEnv(\n    '{credential}',\n    '{apiEndpoint}',\n    '{signalEndpoint}',\n    '{iceServers}',\n    '{onTrialStarted}',\n    '{onTrialEnded}',\n    '{onChangeLanguage}',\n    '{language}',\n);\n</code></pre> <ul> <li><code>credential</code>: \uc778\uc99d \uc815\ubcf4</li> <li><code>apiEndpoint</code>: API \uc5d4\ub4dc\ud3ec\uc778\ud2b8 URL</li> <li><code>signalEndpoint</code>: \uc2dc\uadf8\ub110\ub9c1 \uc11c\ubc84 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 URL</li> <li><code>iceServers</code>: ICE \uc11c\ubc84 \uc124\uc815</li> <li><code>onTrialStarted</code>: \ud2b8\ub77c\uc774\uc5bc \uc2dc\uc791 \ucf5c\ubc31</li> <li><code>onTrialEnded</code>: \ud2b8\ub77c\uc774\uc5bc \uc885\ub8cc \ucf5c\ubc31</li> <li><code>onChangeLanguage</code>: \uc5b8\uc5b4 \ubcc0\uacbd \ucf5c\ubc31</li> <li><code>language</code>: \ucd08\uae30 \uc5b8\uc5b4 \uc124\uc815</li> </ul>"},{"location":"sdk/flutter-web/#_9","title":"\uc0ac\uc6a9\uc608\uc2dc","text":"<pre><code>void main() async {\n  // \ud658\uacbd \uc124\uc815\n  AppEnv.setEnv(\n    credential: 'your_credential',\n    apiEndpoint: 'https://api.example.com',\n    signalEndpoint: 'wss://signal.example.com',\n    iceServers: [\n      {'urls': 'stun:stun.example.com:19302'},\n    ],\n    language: 'en-US',\n  );\n\n  // LiveStylerManager \ucd08\uae30\ud654\n  final manager = LiveStylerManager(\n    credential: AppEnv.credential,\n    apiEndpoint: AppEnv.apiEndpoint,\n    signalEndpoint: AppEnv.signalEndpoint,\n    iceServerList: AppEnv.iceServers.map((server) =&gt; StunTurnServer.fromJson(server)).toList(),\n    localRenderer: RTCVideoRenderer(),\n    remoteRenderer: RTCVideoRenderer(),\n    signalStateListener: YourSignalStateListener(),\n    rendererStateListener: YourRendererStateListener(),\n    dataChannelStateListener: YourDataChannelStateListener(),\n    onReceiveStatsData: (stats) {\n      print('Received stats: $stats');\n    },\n  );\n\n  await manager.initialize();\n  await manager.start();\n\n  // \uc2a4\ud0c0\uc77c \ubaa8\ub378 \ubcc0\uacbd\n  await manager.changeModel('romantic');\n\n  // \uce74\uba54\ub77c \uc804\ud658\n  await manager.switchCamera('front_camera_id');\n\n  // \uc5f0\uacb0 \uc885\ub8cc\n  await manager.stop();\n}\n</code></pre>"},{"location":"sdk/flutter/","title":"LiveStyler SDK for Flutter(Android, iOS)","text":"<p>Flutter CrossPlatfom \uc5d0 LiveStyler \uae30\ub2a5\uc744 \uc801\uc6a9\ud558\uae30 \uc704\ud55c SDK\uc785\ub2c8\ub2e4. SDK\ub294 \uce74\uba54\ub77c\ub97c \ucd08\uae30\ud654\ud558\uc5ec \ucd2c\uc601\ub41c \uc601\uc0c1\uc744 \uc804\uc1a1\ud558\uace0 \uc601\uc0c1\ucc98\ub9ac\uac00 \uc644\ub8cc\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0\ud558\uc5ec \ubcf4\uc5ec\uc8fc\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"sdk/flutter/#_1","title":"\uc2dc\uc791\ud558\uae30","text":""},{"location":"sdk/flutter/#_2","title":"\uc694\uad6c\uc0ac\ud56d","text":"<ul> <li>Flutter 3.24.5 \uc774\uc0c1</li> <li>Android 9.0 \uc774\uc0c1<ul> <li>AGP 8.0 \uc774\uc0c1</li> <li>Kotlin 1.7.21 \uc774\uc0c1</li> </ul> </li> <li>iOS 12.0 \uc774\uc0c1<ul> <li>Xcode 12.0 \uc774\uc0c1</li> <li>Swift 5.0 \uc774\uc0c1</li> </ul> </li> </ul>"},{"location":"sdk/flutter/#_3","title":"\uc8fc\uc694\uae30\ub2a5","text":"<ul> <li>\uc2dc\uadf8\ub110 \ucc44\ub110\uc744 \ud1b5\ud55c \uc601\uc0c1 \ubcc0\ud658\uc744 \uc81c\uc5b4</li> <li>\uce74\uba54\ub77c\uc758 \uc601\uc0c1\uc744 WebRTC \uc11c\ubc84\ub85c \uc804\uc1a1</li> <li>\ud544\ud130\uac00 \uc801\uc6a9\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0</li> </ul>"},{"location":"sdk/flutter/#_4","title":"\uc124\uce58","text":""},{"location":"sdk/flutter/#gradle","title":"Gradle","text":"<pre><code># pubspec.yml\n\ndependencies:\n    # \uc800\uc7a5\uc18c \uc900\ube44 \uc911\uc785\ub2c8\ub2e4.\n    livestayler_sdk_flutter:\n        git: https://github.com/dob-world/LiveStylerSDKFlutter.git\n        ref: 0.0.1\n</code></pre> <p>\uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4:</p> <pre><code>$ flutter pub get\n</code></pre>"},{"location":"sdk/flutter/#_5","title":"\uc0ac\uc6a9\ubc29\ubc95","text":""},{"location":"sdk/flutter/#_6","title":"\uc26c\uc6b4 \uc0ac\uc6a9","text":"<p>\uae30\ub2a5\uc774 \uc0ac\uc804\uc5d0 \uad6c\ud604\ub41c <code>StreamPage</code> \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>// \ud658\uacbd \ucd08\uae30\ud654\nAppEnv.setEnv(\n    '{credential}',\n    '{apiEndpoint}',\n    '{signalEndpoint}',\n    '{iceServers}',\n    '{onTrialStarted}',\n    '{onTrialEnded}',\n    '{language}',\n);\n\n// \ud654\uba74 \uc774\ub3d9\nNavigator.of(context).push(\n    MaterialPageRoute(\n        builder: (context) {\n            return StreamPage();\n        },\n    ),\n);\n</code></pre>"},{"location":"sdk/flutter/#_7","title":"\uc9c1\uc811 \uac1c\ubc1c","text":"<p>\uc26c\uc6b4 \uc0ac\uc6a9\uc5d0\uc11c\ub294 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \ucd94\uac00\uc801\uc778 \uae30\ub2a5, UI/UX\uc758 \uc784\uc758 \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub294 \uc9c1\uc811 \uad6c\ud604\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.</p> <p>\uc0ac\uc6a9 \ubc29\ubc95\uc740 \ud6c4\uc220\ud560 \uc8fc\uc694 \uae30\ub2a5 \uba85\uc138\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p> <p>\ud654\uba74\uc758 \ub514\uc790\uc778\uacfc \uae30\ub2a5\uc744 \ubcc0\uacbd\ud558\uace0\uc790 \ud558\uba74 <code>stream_page.dart</code> \ud30c\uc77c\uc744 \ucc38\uace0\ud558\uc5ec \uc0ac\uc6a9\ud558\uc138\uc694.</p> <p>\uc138\ubd80\uc801\uc778 API \uba85\uc138\ub294 Flutter Web APIs\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p>"},{"location":"sdk/flutter/#_8","title":"\uc8fc\uc694 \uae30\ub2a5 \uba85\uc138","text":"<p>API\ub97c \uc0ac\uc6a9\ud558\uba74 \ud654\uba74\uc758 \uae30\ub2a5\uc744 \uc9c1\uc811 \ub9cc\ub4e4\uc5b4 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"sdk/flutter/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>_liveStylerManager = LiveStylerManager(\n    credential: '{credential}',\n    apiEndpoint: '{apiEndpoint}',\n    signalEndpoint: '{signalEndpoint}',\n    iceServerList: '{iceServers}',\n    iceTransportsType: 'Relay',\n    localRenderer: {localRenderer},\n    remoteRenderer: {remoteRenderer},\n    signalStateListener: {signalStateListener},\n    rendererStateListener: {rendererStateListener},\n    dataChannelStateListener: {dataChannelStateListener},\n    onReceiveStatsData: {onReceiveStatsData},\n);\n</code></pre> <ul> <li><code>credential</code>: \uad00\ub9ac\uc790 \ud398\uc774\uc9c0\ub97c \ud1b5\ud574 \ubc1c\uae09 \ubc1b\uc740 \uc778\uc99d \ud1a0\ud070</li> <li><code>apiEndpoint</code>: \uc11c\ube44\uc2a4\uc758 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 API \uc11c\ubc84</li> <li><code>signalEndpoint</code>: \ubc31\uc5d4\ub4dc\uc640 \uc778\uc99d \uc815\ubcf4\ub97c \uc8fc\uace0 \ubc1b\ub294 \uc2dc\uadf8\ub110 \ucc44\ub110 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc8fc\uc18c</li> <li><code>iceServers</code>: STUN \uc11c\ubc84\uc640 TURN \uc11c\ubc84\ub97c \uc124\uc815, STUN \uc11c\ubc84\ub294 \uc81c\uacf5\ub41c \uad6c\uae00 STUN \uc0ac\uc6a9 \uad8c\uc7a5</li> <li><code>iceTransportsType</code>: All, NoHost, Relay \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec Peep-to-peer \uc5f0\uacb0 \ubc29\uc2dd\uc744 \uc9c0\uc815</li> <li><code>localRenderer</code>: WebRTC \uc2a4\ud2b8\ub9bc\uc744 \ub80c\ub354\ub9c1\ud558\ub294 \ub80c\ub354\ub7ec(RTCVideoRenderer)</li> <li><code>remoteRenderer</code>: WebRTC \ub9ac\ubaa8\ud2b8 \uc2a4\ud2b8\ub9bc\uc744 \ub80c\ub354\ub9c1\ud558\ub294 \ub80c\ub354\ub7ec(RTCVideoRenderer)</li> <li><code>signalStateListener</code>: \uc2dc\uadf8\ub110 \ucc44\ub110\uc758 \uc774\ubca4\ud2b8\ub97c \ucc98\ub9ac</li> <li><code>rendererStateListener</code>: \ub80c\ub354\ub7ec\uc758 \uc774\ubca4\ud2b8\ub97c \ucc98\ub9ac</li> <li><code>dataChannelStateListener</code>: \ub370\uc774\ud130 \ucc44\ub110\uc758 \uc774\ubca4\ud2b8\ub97c \ucc98\ub9ac</li> <li><code>onReceiveStatsData</code>: \uc7ac\uc0dd \ud1b5\uacc4\uac00 \uc218\uc2e0\ub418\ub294 \ucf5c\ubc31 \ud568\uc218</li> </ul>"},{"location":"sdk/flutter/#initialize","title":"initialize()","text":"<p>\ucd08\uae30\ud654\uac00 \ub420 \ub54c \ud544\uc694\ud55c \uc791\uc5c5\uc774 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</p> <pre><code>@override\nvoid initState() {\n    super.initState();\n    _liveStylerManager.initialize();\n}\n</code></pre>"},{"location":"sdk/flutter/#release","title":"release()","text":"<p>\uc2dc\uadf8\ub110 \uc11c\ubc84 \uc5f0\uacb0\uacfc WebRTC \uc5f0\uacb0\uc744 \uc644\uc804\ud788 \uc885\ub8cc\ud558\uace0 \ub9ac\uc18c\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> <pre><code>@override\nvoid dispose() {\n    _liveStylerManager.release();\n    super.dispose();\n}\n</code></pre>"},{"location":"sdk/flutter/#updatefiltercategory","title":"updateFilterCategory()","text":"<p>API \uc11c\ubc84\uc5d0\uc11c \ud544\ud130, \uce74\ud14c\uace0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc0c8\ub85c \ubc1b\uc544 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4. \ud544\ud130 \ub9ac\uc2a4\ud2b8\ub294 \uc2dc\uadf8\ub110 \uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ub429\ub2c8\ub2e4. \uac31\uc2e0\ub41c \ub9ac\uc2a4\ud2b8\ub294 SignalStateListener\ub97c \ud1b5\ud574 \uc804\ub2ec\ub429\ub2c8\ub2e4.</p> <pre><code>_liveStylerManager.updateFilterCategory();\n</code></pre>"},{"location":"sdk/flutter/#switchcamerastring","title":"switchCamera(String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \uce74\uba54\ub77c ID\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. \uce74\uba54\ub77c ID\ub294 CameraManager\ub97c \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>_liveStylerManager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li><code>camera_id</code>: MediaDevices\ub97c \ud1b5\ud574 \uc5bb\uc740 \uce74\uba54\ub77c\uc758 ID</li> </ul>"},{"location":"sdk/flutter/#changemodelstring","title":"changeModel(String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \ubaa8\ub378 \uc774\ub984\uc73c\ub85c \ud544\ud130 \ubaa8\ub378\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4.</p> <pre><code>_liveStylerManager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li><code>model_name</code>: FilterCategoryData\uc758 \ubaa8\ub378 \uc774\ub984</li> </ul>"},{"location":"sdk/flutter/#appenv","title":"AppEnv","text":"<p>AppEnv \ud074\ub798\uc2a4\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \ud658\uacbd \uc124\uc815\uc744 \uad00\ub9ac\ud569\ub2c8\ub2e4.</p> <pre><code>// \ud658\uacbd \uc124\uc815\nAppEnv.setEnv(\n    '{credential}',\n    '{apiEndpoint}',\n    '{signalEndpoint}',\n    '{iceServers}',\n    '{onTrialStarted}',\n    '{onTrialEnded}',\n    '{onChangeLanguage}',\n    '{language}',\n);\n</code></pre> <ul> <li><code>credential</code>: \uc778\uc99d \uc815\ubcf4</li> <li><code>apiEndpoint</code>: API \uc5d4\ub4dc\ud3ec\uc778\ud2b8 URL</li> <li><code>signalEndpoint</code>: \uc2dc\uadf8\ub110\ub9c1 \uc11c\ubc84 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 URL</li> <li><code>iceServers</code>: ICE \uc11c\ubc84 \uc124\uc815</li> <li><code>onTrialStarted</code>: \ud2b8\ub77c\uc774\uc5bc \uc2dc\uc791 \ucf5c\ubc31</li> <li><code>onTrialEnded</code>: \ud2b8\ub77c\uc774\uc5bc \uc885\ub8cc \ucf5c\ubc31</li> <li><code>onChangeLanguage</code>: \uc5b8\uc5b4 \ubcc0\uacbd \ucf5c\ubc31</li> <li><code>language</code>: \ucd08\uae30 \uc5b8\uc5b4 \uc124\uc815</li> </ul>"},{"location":"sdk/flutter/#_9","title":"\uc0ac\uc6a9\uc608\uc2dc","text":"<pre><code>void main() async {\n  // \ud658\uacbd \uc124\uc815\n  AppEnv.setEnv(\n    credential: 'your_credential',\n    apiEndpoint: 'https://api.example.com',\n    signalEndpoint: 'wss://signal.example.com',\n    iceServers: [\n      {'urls': 'stun:stun.example.com:19302'},\n    ],\n    language: 'en-US',\n  );\n\n  // LiveStylerManager \ucd08\uae30\ud654\n  final manager = LiveStylerManager(\n    credential: AppEnv.credential,\n    apiEndpoint: AppEnv.apiEndpoint,\n    signalEndpoint: AppEnv.signalEndpoint,\n    iceServerList: AppEnv.iceServers.map((server) =&gt; StunTurnServer.fromJson(server)).toList(),\n    localRenderer: RTCVideoRenderer(),\n    remoteRenderer: RTCVideoRenderer(),\n    signalStateListener: YourSignalStateListener(),\n    rendererStateListener: YourRendererStateListener(),\n    dataChannelStateListener: YourDataChannelStateListener(),\n    onReceiveStatsData: (stats) {\n      print('Received stats: $stats');\n    },\n  );\n\n  await manager.initialize();\n  await manager.start();\n\n  // \uc2a4\ud0c0\uc77c \ubaa8\ub378 \ubcc0\uacbd\n  await manager.changeModel('romantic');\n\n  // \uce74\uba54\ub77c \uc804\ud658\n  await manager.switchCamera('front_camera_id');\n\n  // \uc5f0\uacb0 \uc885\ub8cc\n  await manager.stop();\n}\n</code></pre>"},{"location":"sdk/ios-streamviewcontroller/","title":"StreamViewController\uc758 \uc18c\uc2a4\ucf54\ub4dc","text":"<pre><code>import AVFoundation\nimport UIKit\nimport WebRTC\n\npublic class StreamViewController: UIViewController {\n    private let manager: LiveStylerManager\n    private let label = UILabel()\n    private var appConstants: AppConstants\n\n    public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n        appConstants = AppConstants()\n        manager = LiveStylerManager(appConstants: appConstants)\n        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n    }\n\n    public required init?(coder: NSCoder) {\n        appConstants = AppConstants()\n        manager = LiveStylerManager(appConstants: appConstants)\n        super.init(coder: coder)\n    }\n\n    public init(appConstants: AppConstants) {\n        self.appConstants = appConstants\n        manager = LiveStylerManager(appConstants: appConstants)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    public override func viewDidLoad() {\n        super.viewDidLoad()\n        setupUI()\n        manager.initialize()\n    }\n\n    public override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        manager.activate()\n    }\n\n    public override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        manager.deactivate()\n    }\n\n    deinit {\n        manager.cleanup()\n    }\n\n    public func setAppConstants(appConstants: AppConstants) {\n        self.appConstants = appConstants\n        setupUI()\n        view.setNeedsLayout()\n    }\n\n    private func setupUI() {\n        title = \"WebRTC Test\"\n        view.backgroundColor = appConstants.colors.background\n\n        setupLabel()\n        setupVideoView()\n        setupLocalVideoView()\n    }\n\n    private func setupLabel() {\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.text = \"\uc601\uc0c1\"\n        label.font = UIFont.systemFont(\n            ofSize: appConstants.ui.titleFontSize,\n            weight: .bold\n        )\n        label.textAlignment = .center\n        label.textColor = appConstants.colors.text\n        view.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(\n                equalTo: view.safeAreaLayoutGuide.topAnchor,\n                constant: appConstants.ui.defaultMargin\n            ),\n            label.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            label.heightAnchor.constraint(equalToConstant: appConstants.ui.largeMargin),\n        ])\n    }\n\n    private func setupVideoView() {\n        let videoView = manager.videoView\n        videoView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(videoView)\n\n        NSLayoutConstraint.activate([\n            videoView.topAnchor.constraint(\n                equalTo: label.bottomAnchor, constant: appConstants.ui.defaultMargin),\n            videoView.leadingAnchor.constraint(\n                equalTo: view.leadingAnchor, constant: appConstants.ui.defaultMargin),\n            videoView.trailingAnchor.constraint(\n                equalTo: view.trailingAnchor, constant: -appConstants.ui.defaultMargin),\n            videoView.bottomAnchor.constraint(\n                equalTo: view.bottomAnchor, constant: -appConstants.ui.defaultMargin),\n        ])\n    }\n\n    private func setupLocalVideoView() {\n        let localVideoView = manager.localVideoView\n        localVideoView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(localVideoView)\n\n        NSLayoutConstraint.activate([\n            localVideoView.widthAnchor.constraint(\n                equalToConstant: appConstants.stream.localVideoSize.width),\n            localVideoView.heightAnchor.constraint(\n                equalToConstant: appConstants.stream.localVideoSize.height),\n            localVideoView.trailingAnchor.constraint(\n                equalTo: view.trailingAnchor, constant: -appConstants.ui.defaultMargin),\n            localVideoView.bottomAnchor.constraint(\n                equalTo: view.safeAreaLayoutGuide.bottomAnchor,\n                constant: -appConstants.ui.defaultMargin),\n        ])\n    }\n}\n</code></pre>"},{"location":"sdk/ios/","title":"LiveStyler SDK for iOS","text":"<p>iOS\uc6a9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 LiveStyler \uae30\ub2a5\uc744 \uc801\uc6a9\ud558\uae30 \uc704\ud55c SDK\uc785\ub2c8\ub2e4. SDK\ub294 \uce74\uba54\ub77c\ub97c \ucd08\uae30\ud654\ud558\uc5ec \ucd2c\uc601\ub41c \uc601\uc0c1\uc744 \uc804\uc1a1\ud558\uace0 \uc601\uc0c1\ucc98\ub9ac\uac00 \uc644\ub8cc\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0\ud558\uc5ec \ubcf4\uc5ec\uc8fc\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"sdk/ios/#_1","title":"\uc2dc\uc791\ud558\uae30","text":""},{"location":"sdk/ios/#_2","title":"\uc694\uad6c \uc0ac\ud56d","text":"<ul> <li>iOS 12.0 \uc774\uc0c1</li> <li>Xcode 12.0 \uc774\uc0c1</li> <li>Swift 5.0 \uc774\uc0c1</li> </ul>"},{"location":"sdk/ios/#_3","title":"\uc8fc\uc694\uae30\ub2a5","text":"<ul> <li>\uc2dc\uadf8\ub110 \ucc44\ub110\uc744 \ud1b5\ud55c \uc601\uc0c1 \ubcc0\ud658\uc744 \uc81c\uc5b4</li> <li>\uce74\uba54\ub77c\uc758 \uc601\uc0c1\uc744 WebRTC \uc11c\ubc84\ub85c \uc804\uc1a1</li> <li>\ud544\ud130\uac00 \uc801\uc6a9\ub41c \uc601\uc0c1\uc744 \uc218\uc2e0</li> </ul>"},{"location":"sdk/ios/#_4","title":"\uc124\uce58","text":""},{"location":"sdk/ios/#cocoapods","title":"CocoaPods","text":"<p><code>Podfile</code>\uc5d0 \ub2e4\uc74c \ub77c\uc778\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4:</p> <pre><code>pod 'LiveStylerSDK', :git =&gt; 'https://{ghp_token}@github.com/dob-world/livestyler-sdk-ios.git', :tag =&gt; '0.0.1'\n</code></pre> <ul> <li><code>ghp_token</code>: Github\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uac1c\uc778 \ud1a0\ud070\uc785\ub2c8\ub2e4. \uc800\uc7a5\uc18c\uc5d0 \uc811\uadfc \uad8c\ud55c\uc774 \uc788\ub294 \uacc4\uc815\uc758 \uac1c\uc778 \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud558\uc138\uc694.</li> </ul> <p>\uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4:</p> <pre><code>$ pod install\n</code></pre>"},{"location":"sdk/ios/#_5","title":"\uc0ac\uc6a9\ubc29\ubc95","text":""},{"location":"sdk/ios/#_6","title":"\uc26c\uc6b4 \uc0ac\uc6a9","text":"<p>\uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud574 \uc0ac\uc804\uc5d0 \uad6c\ud604\ub418\uc5b4 \uc788\ub294 \uae30\ub2a5\uc744 \uac04\ub2e8\ud558\uac8c \uc801\uc6a9\ud558\uc5ec \uc0ac\uc6a9\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>import LiveStylerSDK\n\nlet contants = AppConstants(\n    servers: Servers(\n        credential: \"{user_credential}\",                // \uad00\ub9ac\uc790 \ucf58\uc194\uc5d0\uc11c \ubc1c\uae09\ud55c Access Token\n        webSocketURL: \"{signaling_endpoint}\",           // \ubc31\uc5d4\ub4dc\uc640 \uc778\uc99d \uc815\ubcf4\ub97c \uc8fc\uace0 \ubc1b\ub294 \uc2dc\uadf8\ub110 \ucc44\ub110 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc8fc\uc18c\n        stunServer: \"stun:stun.l.google.com:19302\",     // STUN \uc11c\ubc84 \uc8fc\uc18c\n        turnServer: \"{turn_server_endpoint}\",           // TURN \uc11c\ubc84 \uc8fc\uc18c\n        turnUsername: \"{username}\",                     // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n        turnPassword: \"{password}\"                      // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n    )\n)\n\nStreamViewController(appConstants: contants)\n</code></pre>"},{"location":"sdk/ios/#_7","title":"\uc9c1\uc811 \uac1c\ubc1c","text":"<p>\uc26c\uc6b4 \uc0ac\uc6a9\uc5d0\uc11c\ub294 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \ucd94\uac00\uc801\uc778 \uae30\ub2a5, UI/UX\uc758 \uc784\uc758 \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub294 \uc9c1\uc811 \uad6c\ud604\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.</p> <p>\uc0ac\uc6a9 \ubc29\ubc95\uc740 \ud6c4\uc220\ud560 \uc8fc\uc694 \uae30\ub2a5 \uba85\uc138\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc608\uc81c\ub294 SDK\ub85c \uc81c\uacf5\ub418\ub294 StreamViewController\uc758 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p> <p>\uc138\ubd80\uc801\uc778 API \uba85\uc138\ub294 iOS APIs\ub97c \ucc38\uace0\ud558\uc5ec \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p>"},{"location":"sdk/ios/#_8","title":"\uc8fc\uc694 \uae30\ub2a5 \uba85\uc138","text":""},{"location":"sdk/ios/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>/// \ucd08\uae30\ud654\n\nlet contants = AppConstants(\n    servers: Servers(\n        credential: \"{user_credential}\",                // \uad00\ub9ac\uc790 \ucf58\uc194\uc5d0\uc11c \ubc1c\uae09\ud55c Access Token\n        webSocketURL: \"{signaling_endpoint}\",           // \ubc31\uc5d4\ub4dc\uc640 \uc778\uc99d \uc815\ubcf4\ub97c \uc8fc\uace0 \ubc1b\ub294 \uc2dc\uadf8\ub110 \ucc44\ub110 \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc8fc\uc18c\n        stunServer: \"stun:stun.l.google.com:19302\",     // STUN \uc11c\ubc84 \uc8fc\uc18c\n        turnServer: \"{turn_server_endpoint}\",           // TURN \uc11c\ubc84 \uc8fc\uc18c\n        turnUsername: \"{username}\",                     // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n        turnPassword: \"{password}\"                      // TURN \uc11c\ubc84 \uc778\uc99d \uc815\ubcf4\n    )\n)\n\nlet manager = LiveStylerManager(appConstants: contants)\n</code></pre>"},{"location":"sdk/ios/#initialize","title":"initialize()","text":"<p>\ucd08\uae30\ud654\uac00 \ub420 \ub54c \ud544\uc694\ud55c \uc791\uc5c5\uc774 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</p> <pre><code>public override func viewDidLoad() {\n    super.viewDidLoad()\n    manager.initialize()\n}\n</code></pre>"},{"location":"sdk/ios/#activate","title":"activate()","text":"<p>\uce74\uba54\ub77c \ucea1\ucc98\ub97c \uc2dc\uc791\ud569\ub2c8\ub2e4.</p> <pre><code>public override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    manager.activate()\n}\n</code></pre>"},{"location":"sdk/ios/#deactivate","title":"deactivate()","text":"<p>\uce74\uba54\ub77c \ucea1\ucc98\ub97c \uc911\ub2e8\ud569\ub2c8\ub2e4.</p> <pre><code>public override func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n    manager.deactivate()\n}\n</code></pre>"},{"location":"sdk/ios/#cleanup","title":"cleanup()","text":"<p>\uc2dc\uadf8\ub110 \uc11c\ubc84 \uc5f0\uacb0\uacfc WebRTC \uc5f0\uacb0\uc744 \uc644\uc804\ud788 \uc885\ub8cc\ud558\uace0 \ub9ac\uc18c\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> <pre><code>deinit {\n    manager.cleanup()\n}\n</code></pre>"},{"location":"sdk/ios/#switchcameracameraid-string","title":"switchCamera(cameraId: String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \uce74\uba54\ub77c ID\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. \uce74\uba54\ub77c ID\ub294 AVCaptureDevice\ub97c \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>manager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li>camera_id: AVCaptureDevice(iOS \uc2dc\uc2a4\ud15c \ub3c4\uad6c)\ub97c \ud1b5\ud574 \uc5bb\uc740 \uce74\uba54\ub77c\uc758 ID</li> </ul>"},{"location":"sdk/ios/#changemodelmodelname-string","title":"changeModel(modelName: String)","text":"<p>\uc804\ub2ec \ubc1b\uc740 \ubaa8\ub378 \uc774\ub984\uc73c\ub85c \ud544\ud130 \ubaa8\ub378\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4.</p> <pre><code>manager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li>model_name: FilterCategoryData\uc758 \ubaa8\ub378 \uc774\ub984</li> </ul> <p>iOS SDK\uc5d0\ub294 API\ub97c \ud1b5\ud574 \ubaa8\ub378 \ub9ac\uc2a4\ud2b8\ub97c \uac00\uc838\uc624\ub294 \ucc98\ub9ac\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. API \uac00\uc774\ub4dc\ub97c \ucc38\uace0\ud558\uc5ec \ubaa8\ub378 \ub9ac\uc2a4\ud2b8\ub97c \ud655\uc778\ud558\uc5ec \uc0ac\uc6a9\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.</p>"},{"location":"sdk/overview/","title":"LiveStyler SDK","text":"<p>LiveStyler SDK\ub294 \ub2e4\uc591\ud55c \ud50c\ub7ab\ud3fc, \ud504\ub808\uc784\uc6cc\ud06c\ub85c \uc81c\uacf5\ub429\ub2c8\ub2e4.</p> <ul> <li>Android SDK</li> <li>iOS SDK</li> <li>Flutter SDK</li> <li>Flutter Web SDK</li> </ul>"},{"location":"sdk/overview/#_1","title":"\uc694\uad6c\uc0ac\ud56d","text":""},{"location":"sdk/overview/#_2","title":"\ubaa8\ubc14\uc77c","text":"<ul> <li>Android 9.0 \uc774\uc0c1 \ub610\ub294 iOS 13 \uc774\uc0c1</li> <li>2018\ub144\ub3c4 \uc774\ud6c4\uc5d0 \ucd9c\uc2dc\ub41c \uc2a4\ub0c5\ub4dc\ub798\uace4 850 \uc774\uc0c1</li> </ul> <p>\uc77c\ubd80 \uc800\uac00\ud615 \uc81c\ud488\uc740 \uce74\uba54\ub77c \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc624\ub798 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uae30\uae30 \uc624\uc791\ub3d9\uc774\ub098 \ubc1c\uc5f4\ud604\uc0c1\uc774 \uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"sdk/overview/#web","title":"Web","text":"<ul> <li>64\ube44\ud2b8 \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ucd5c\uc2e0 Chrome \ube0c\ub77c\uc6b0\uc800 \ub610\ub294 Opera \ube0c\ub77c\uc6b0\uc800</li> </ul> <p>Safari \ubc0f Firefox \uc5d0\uc11c\ub294 \uc815\uc0c1\uc791\ub3d9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p>"},{"location":"sdk/reference-flutter-web/","title":"LiveStyler SDK - Dart2JS APIs","text":""},{"location":"sdk/reference-flutter/","title":"LiveStyler SDK - Dart APIs","text":""},{"location":"sdk/reference-kotlin/","title":"LiveStyler SDK - Kotlin APIs","text":""},{"location":"sdk/reference-swift/","title":"LiveStyler SDK - Swift APIs","text":""},{"location":"en/","title":"LiveStyler","text":"<p>LiveStyler is a real-time AI video filter effect service, an advanced version of the AI-based video filter service Devut.ai developed by dob Studio.</p>"},{"location":"en/#features-of-livestyler","title":"Features of LiveStyler","text":"<p>LiveStyler is designed for easy adoption by providing a cloud-based AI model, which reduces the high costs associated with building and maintaining on-premise AI models.</p> <p>You can send video from your camera in real-time through an application or web service to the cloud and apply AI filters.</p>"},{"location":"en/#documentation-guide","title":"Documentation Guide","text":"<p>This document provides information on the SDKs and APIs for using the LiveStyler service.</p> <ul> <li>SDK: We provide SDKs to easily integrate LiveStyler on various platforms such as iOS, Android, and Flutter. Check the guides and sample code for each platform to get started quickly.</li> <li>API: You can directly control LiveStyler's features through RESTful and WebSocket APIs. Refer to the API specifications and usage guides to implement custom integrations for your service.</li> </ul>"},{"location":"en/api/overview/","title":"LiveStyler API","text":"<p>LiveStyler provides two types of APIs: a WebSocket API for real-time video processing and a REST API for managing resources like filters.</p> <ul> <li>REST API: Used to manage service metadata, such as retrieving a list of filters.</li> <li>WebSocket API: Used to send and receive video streams in real-time via WebRTC.</li> </ul>"},{"location":"en/api/overview/#before-you-start","title":"Before You Start","text":"<p>Issuing an API Secret Key</p> <p>To use this API, you need an API Secret Key. The API Secret Key can be issued through a business inquiry or the management page.</p>"},{"location":"en/api/overview/#base-urls-for-api-integration","title":"Base URLs for API Integration","text":"<ul> <li>WebSocket: <code>wss://bridge-paoqov032tbx.livestyler.ai/client</code></li> <li>REST API: <code>https://api-paoqov032tbx.livestyler.ai</code> </li> </ul>"},{"location":"en/api/rest/#getting-started","title":"Getting Started","text":"<p>The base URL is <code>https://api-paoqov032tbx.livestyler.ai</code>.</p>"},{"location":"en/api/rest/#authentication","title":"Authentication","text":"<p>The REST API uses Basic Authentication. You must send requests with your API Secret Key in the <code>Authorization</code> header.</p> <p>Creating the Authorization Header:</p> <ol> <li> <p>Create a string by appending a colon (<code>:</code>) to your <code>API Secret Key</code>. Leave the password part empty.</p> <ul> <li>Example: <code>your_api_key_here:</code></li> </ul> </li> <li> <p>Base64-encode the resulting string.</p> <ul> <li>Example: <code>eW91cl9hcGlfa2V5X2hlcmU6</code></li> </ul> <p>Tip: Base64 Encoding with a Script</p> <p>You can easily encode the string in a Unix/Linux/macOS terminal with the following command: <pre><code>echo -n 'your_api_key_here:' | base64\n</code></pre></p> </li> <li> <p>Prepend <code>Basic</code> to the encoded string to complete the <code>Authorization</code> header value.</p> <ul> <li>Example: <code>Authorization: Basic eW91cl9hcGlfa2V5X2hlcmU6</code></li> </ul> </li> </ol>"},{"location":"en/api/rest/#rest-api_1","title":"REST API","text":"<p>This API manages metadata for LiveStyler, such as filters. The base URL for all REST APIs is <code>https://api-paoqov032tbx.livestyler.ai</code>.</p>"},{"location":"en/api/rest/#endpoints","title":"Endpoints","text":""},{"location":"en/api/rest/#get-filter-categoryactive","title":"<code>GET /filter-category/active</code>","text":"<ul> <li>Description: Retrieves all currently active filter categories along with the list of filters belonging to each category.</li> </ul> <p>Success Response: <code>200 OK</code></p> <pre><code>[\n  {\n    \"filter_category_id\": \"01JXYDX55DHRY0T0RSDH068BYK\",\n    \"organization_id\": \"01JXY3YG23J6D9PEHBN3DTGFQX\",\n    \"name_ko\": \"\ub85c\ub9e8\ud2f1\",\n    \"name_en\": \"romantic\",\n    \"description\": \"romantic category\",\n    \"is_active\": true,\n    \"created_at\": \"2025-06-17T07:50:51.313Z\",\n    \"updated_at\": \"2025-06-17T07:50:51.313Z\",\n    \"deleted_at\": null,\n    \"filters\": [\n      {\n        \"filter_id\": \"01JXYE1C805H1YAY7DTY1K6PHW\",\n        \"organization_id\": \"01JXY3YG23J6D9PEHBN3DTGFQX\",\n        \"filter_category_id\": \"01JXYDX55DHRY0T0RSDH068BYK\",\n        \"code\": \"filter_01\",\n        \"name_ko\": \"\ub85c\ub9e8\ud2f1 1\",\n        \"name_en\": \"romantic 1\",\n        \"image_url\": \"https://example.com/image.jpg\",\n        \"is_active\": true,\n        \"is_recommended\": false,\n        \"created_at\": \"2025-06-17T07:53:09.634Z\",\n        \"updated_at\": \"2025-06-17T07:53:09.634Z\",\n        \"deleted_at\": null\n      }\n    ]\n  },\n  {\n    \"filter_category_id\": \"01JXYDYQWWG8SKNK1ENV4EKVCE\",\n    \"organization_id\": \"01JXY3YG23J6D9PEHBN3DTGFQX\",\n    \"name_ko\": \"\ub9cc\ud654\",\n    \"name_en\": \"cartoon\",\n    \"description\": \"cartoon category\",\n    \"is_active\": true,\n    \"created_at\": \"2025-06-17T07:51:43.261Z\",\n    \"updated_at\": \"2025-06-17T07:51:43.261Z\",\n    \"deleted_at\": null,\n    \"filters\": []\n  }\n]\n</code></pre> <p>Failure Response: <code>401 Unauthorized</code></p> <pre><code>{\n  \"message\": \"Invalid credentials\"\n}\n</code></pre> <p>cURL Example:</p> <p>Here is a complete example of calling the API to retrieve the filter list using <code>cURL</code>.</p> <pre><code>curl --location 'https://api-paoqov032tbx.livestyler.ai/filter-category/active' \\\n--header 'Authorization: Basic eW91cl9hcGlfa2V5X2hlcmU6'\n</code></pre>"},{"location":"en/api/websocket/#getting-started","title":"Getting Started","text":"<p>The base connection address is <code>wss://bridge-paoqov032tbx.livestyler.ai/client</code>.</p>"},{"location":"en/api/websocket/#authentication","title":"Authentication","text":"<p>Once the WebSocket connection is successfully established, you must first request authentication from the server. Authentication is done by sending the issued <code>API Secret Key</code> in a <code>CREDENTIAL</code> message.</p>"},{"location":"en/api/websocket/#authentication-request-client-server","title":"Authentication Request (Client \u2192 Server)","text":"<p>The client sends a message to the server in the following format.</p> <ul> <li><code>type</code>: <code>CREDENTIAL</code></li> <li><code>payload.credential</code>: Your issued <code>API Secret Key</code></li> </ul> <pre><code>{\n  \"type\": \"CREDENTIAL\",\n  \"payload\": {\n    \"credential\": \"sk_TEST01_my0Secret1Token2Value3\"\n  }\n}\n</code></pre>"},{"location":"en/api/websocket/#authentication-response-server-client","title":"Authentication Response (Server \u2192 Client)","text":"<p>The server responds to the client's authentication request as follows.</p> <p>Authentication Success</p> <p>If the authentication information is valid, the server sends an <code>auth_success</code> message as shown below. After receiving this message, you can start exchanging other API messages.</p> <pre><code>{\n  \"type\": \"auth_success\"\n}\n</code></pre> <p>Authentication Failure</p> <p>If the authentication information is invalid, the server will immediately close the WebSocket connection without sending a separate error message.</p>"},{"location":"en/api/websocket/#websocket-api_1","title":"WebSocket API","text":"<p>This is the API for WebRTC communication.</p> <p>For SDK Users</p> <p>This API is already integrated into the SDK, so if you are using the SDK, you can use the WebRTC features directly without needing to call this API yourself.</p>"},{"location":"en/api/websocket/#message-types","title":"Message Types","text":""},{"location":"en/api/websocket/#session_start","title":"<code>session_start</code>","text":"<p>(Client \u2192 Server) Sends WebRTC session start information to the server. <pre><code>{\n  \"type\": \"session_start\"\n}\n</code></pre></p> <p>Session Start Information</p> <p>This message is used to initiate a WebRTC session. The server will respond with the necessary information to proceed with the session. The following messages may be sent by the server in response: - <code>{ \"type\": \"node_status\", \"status\": \"pending\"}</code>: Indicates that the server is provisioning. - <code>{ \"type\": \"node_status\", \"status\": \"full\"}</code>: Indicates that the server's resources are full. - <code>{ \"type\": \"node_status\", \"status\": \"waiting\"}</code>: Indicates that the server instance is ready.</p>"},{"location":"en/api/websocket/#offer","title":"<code>offer</code>","text":"<p>(Client \u2192 Server) Sends WebRTC offer information to the server. <pre><code>{\n  \"type\": \"offer\",\n  \"sdp\": \"{offer sdp}\"\n}\n</code></pre></p> <p>On Success</p> <ul> <li>If a server is being provisioned, a <code>{\"type\":\"server_provisioning\"}</code> message is sent.</li> <li>If an existing server is used, there is no separate message.</li> </ul> <p>On Failure</p> <ul> <li>An error message is sent.<ul> <li><code>Maximum pool size reached. Cannot assign a new node.</code>: Occurs when a new node cannot be assigned.</li> <li><code>Failed to start a stopped node.</code>: Occurs when a stopped node fails to start.</li> </ul> </li> </ul>"},{"location":"en/api/websocket/#answer","title":"<code>answer</code>","text":"<p>(Server \u2192 Client) Sends WebRTC answer information to the client. <pre><code>{\n  \"type\": \"answer\",\n  \"sdp\": \"{answer sdp}\"\n}\n</code></pre></p>"},{"location":"en/api/websocket/#candidate","title":"<code>candidate</code>","text":"<p>(Bidirectional) Exchanges WebRTC ICE candidate information in both directions. <pre><code>{\n  \"type\": \"candidate\",\n  \"candidate\": {\n    \"sdpMid\": \"{ice candidate sdpMid}\",\n    \"sdpMLineIndex\": {ice candidate sdpMLineIndex},\n    \"candidate\": \"{ice candidate}\"\n  }\n}\n</code></pre></p>"},{"location":"en/sdk/android-fragmentstreamxml/","title":"fragment_stream.xml.xml Source Code","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"ai.livestyler.LiveStylerSDKAndroid.StreamFragment\"&gt;\n\n    &lt;FrameLayout\n        android:id=\"@+id/render_view_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@color/black\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"&gt;\n\n        &lt;org.webrtc.SurfaceViewRenderer\n            android:id=\"@+id/render_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"center\"\n            /&gt;\n\n    &lt;/FrameLayout&gt;\n\n    &lt;androidx.appcompat.widget.AppCompatImageView\n        android:id=\"@+id/imageview_logo\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"33.5dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:src=\"@drawable/logo_live_styler\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/textview_local_stream\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"4dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"4dp\"\n        style=\"@style/TextAppearance.MaterialComponents.Caption\"\n        android:text=\"@string/provisioning_server_stream\"\n        android:textSize=\"10sp\"\n        android:textStyle=\"bold\"\n        android:textColor=\"@color/white\"\n        android:textAlignment=\"textEnd\"\n        app:layout_constraintTop_toBottomOf=\"@id/imageview_logo\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toTopOf=\"@id/textview_remote_stream\"\n        tools:ignore=\"SmallSp\" /&gt;\n\n    &lt;TextView\n        android:id=\"@+id/textview_remote_stream\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"4dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"16dp\"\n        style=\"@style/TextAppearance.MaterialComponents.Caption\"\n        android:text=\"@string/provisioning_server_stream\"\n        android:textSize=\"10sp\"\n        android:textStyle=\"bold\"\n        android:textColor=\"@color/white\"\n        android:textAlignment=\"textEnd\"\n        app:layout_constraintTop_toBottomOf=\"@id/textview_local_stream\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        tools:ignore=\"SmallSp\" /&gt;\n\n    &lt;FrameLayout\n        android:id=\"@+id/preview_container\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"1dp\"\n        android:layout_marginTop=\"33.5dp\"\n        android:background=\"@color/black\"\n        app:layout_constraintTop_toBottomOf=\"@id/imageview_logo\"\n        app:layout_constraintStart_toStartOf=\"@id/imageview_logo\"&gt;\n\n        &lt;org.webrtc.SurfaceViewRenderer\n            android:id=\"@+id/preview\"\n            android:layout_width=\"90dp\"\n            android:layout_height=\"160dp\"\n            android:layout_gravity=\"center\"\n            /&gt;\n\n    &lt;/FrameLayout&gt;\n\n    &lt;Spinner\n        android:id=\"@+id/spinner_camera\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintStart_toStartOf=\"@id/preview_container\"\n        app:layout_constraintTop_toBottomOf=\"@id/preview_container\"\n        app:layout_constraintEnd_toEndOf=\"@id/preview_container\"\n        android:paddingEnd=\"0dp\"\n        tools:listitem=\"@layout/support_simple_spinner_dropdown_item\"\n        tools:ignore=\"RtlSymmetry\" /&gt;\n\n    &lt;include\n        layout=\"@layout/button_style_panel\"\n        android:id=\"@+id/style_panel_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"35dp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"1\"\n        app:layout_constraintVertical_bias=\"1\"\n        /&gt;\n\n    &lt;include\n        layout=\"@layout/layout_style_panel\"\n        android:id=\"@+id/style_panel\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintVertical_bias=\"1\"\n        android:visibility=\"invisible\"\n        /&gt;\n\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;\n</code></pre>"},{"location":"en/sdk/android-streamfragmentkt/","title":"StreamFragment.kt Source Code","text":"<pre><code>class StreamFragment : Fragment(), SignalStateListener, RendererStateListener {\n\n    // Layout Binding\n    private var _binding: FragmentStreamBinding? = null\n\n    // This property is only valid between onCreateView and\n    // onDestroyView.\n    private val binding get() = _binding!!\n\n    private lateinit var liveStylerManager: LiveStylerManager\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        liveStylerManager = LiveStylerManager(\n            {credential},\n            {apiEndpoint},\n            {signalEndpoint},\n            {servers},\n        )\n\n        liveStylerManager.onCreate(requireContext(), this)\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentStreamBinding.inflate(inflater, container, false)\n        liveStylerManager.onCreateView(this, this)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        liveStylerManager.onViewCreated(binding.preview, binding.renderView)\n\n        // \uce74\uba54\ub77c \ud37c\ubbf8\uc158 \uccb4\ud06c \ubc0f \uc694\uccad\n        when {\n            ContextCompat.checkSelfPermission(\n                requireContext(),\n                Manifest.permission.CAMERA\n            ) == PackageManager.PERMISSION_GRANTED -&gt; {\n                // You can use the API that requires the permission.\n            }\n            shouldShowRequestPermissionRationale(Manifest.permission.CAMERA) -&gt; {\n                // In an educational UI, explain to the user why your app requires this\n                // permission for a specific feature to behave as expected, and what\n                // features are disabled if it's declined. In this UI, include a\n                // \"cancel\" or \"no thanks\" button that allows the user to continue\n                // using your app without granting the permission.\n                // showInContextUI(...)\n            }\n            else -&gt; {\n                // You can directly ask for the permission.\n                requestPermissionLauncher.launch(Manifest.permission.CAMERA)\n            }\n        }\n    }\n\n    @RequiresPermission(Manifest.permission.CAMERA)\n    override fun onResume() {\n        super.onResume()\n        liveStylerManager.onResume()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        liveStylerManager.onPause()\n    }\n\n    override fun onStop() {\n        liveStylerManager.onStop()\n        super.onStop()\n    }\n\n    override fun onDestroyView() {\n        liveStylerManager.onDestroy()\n        _binding = null\n        super.onDestroyView()\n    }\n\n    /* SignalStateListener Implements Methods */\n    override fun onServerPreparing() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onServerReady() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onReceivedFilterList(filterList: List&lt;FilterCategoryData&gt;?) {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onErrorFilterList(error: String?) {\n        TODO(\"Not yet implemented\")\n    }\n\n    /* RendererStateListener Implements Methods */\n    override fun onLocalPreparing() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onLocalFirstFrameRendered() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onLocalStateChanged(state: RendererState) {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onRemotePreparing() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onRemoteFirstFrameRendered() {\n        TODO(\"Not yet implemented\")\n    }\n\n    override fun onRemoteStateChanged(state: RendererState) {\n        TODO(\"Not yet implemented\")\n    }\n}\n</code></pre>"},{"location":"en/sdk/android/","title":"LiveStyler SDK for Android","text":"<p>This SDK is for applying LiveStyler features to Android applications. The SDK provides functionality to initialize the camera, send the captured video, and receive and display the video after processing is complete.</p>"},{"location":"en/sdk/android/#getting-started","title":"Getting Started","text":""},{"location":"en/sdk/android/#requirements","title":"Requirements","text":"<ul> <li>Android 9.0 or higher</li> <li>AGP 8.0 or higher</li> <li>Kotlin 1.7.21 or higher</li> </ul>"},{"location":"en/sdk/android/#key-features","title":"Key Features","text":"<ul> <li>Control video conversion through a signaling channel</li> <li>Send camera video to a WebRTC server</li> <li>Receive video with filters applied</li> </ul>"},{"location":"en/sdk/android/#installation","title":"Installation","text":""},{"location":"en/sdk/android/#gradle","title":"Gradle","text":"<pre><code>// root/build.gradle\nallprojects {\n    repositories {\n        ...\n        maven {\n            url = uri(\"https://maven.pkg.github.com/dob-world/livestyler-sdk-android\")\n            credentials {\n                username = System.getenv(\"GITHUB_USERNAME\") ?: \"{username}\"\n                password = System.getenv(\"GITHUB_TOKEN\") ?: \"{PAT}\"\n            }\n        }\n        ...\n    }\n}\n</code></pre> <ul> <li><code>username</code>: Github \uc0ac\uc6a9\uc790 \uacc4\uc815</li> <li><code>PAT</code>: Github Personal Access Token</li> </ul> <pre><code>// app/build.gradle\ndependencies {\n    implementation \"ai.livestyler:livestyler-sdk-android:latest.release\"\n}\n</code></pre> <p>Then execute the following command:</p> <pre><code>$ ./gradlew build --refresh-dependencies\n</code></pre>"},{"location":"en/sdk/android/#how-to-use","title":"How to Use","text":""},{"location":"en/sdk/android/#easy-usage","title":"Easy Usage","text":"<p>You can use the pre-implemented <code>StreamFragment</code>.</p> <pre><code>// Initialization\nval args = Bundle().apply {\n    putString(\"credential\", \"{credential}\")                             // Authentication token issued through the admin page\n    putString(\"apiEndpoint\", \"{apiEndpoint}\")                           // API server to get service information\n    putString(\"signalEndpoint\", \"{signalEndpoint}\")                     // Signaling channel endpoint address for exchanging authentication information with the backend\n    putParcelableArrayList(\n        \"serverEndpoints\",                                              // Set STUN and TURN servers, recommended to use the provided Google STUN server\n        arrayListOf(\n            Bundle().apply {\n                putString(\"type\", \"stun\")\n                putString(\"endpoint\", \"stun:stun.l.google.com:19302\")   // STUN server address\n            },\n            Bundle().apply {\n                putString(\"type\", \"turn\")\n                putString(\"endpoint\", \"{turnEndpoint}\")                 // TURN server address\n                putString(\"username\", \"{username}\")                     // TURN server authentication information\n                putString(\"password\", \"{password}\")                     // TURN server authentication information\n            },\n            Bundle().apply {\n                putString(\"type\", \"turn\")\n                putString(\"endpoint\", \"{turnEndpoint}\")                 // TURN server address\n                putString(\"username\", \"{username}\")                     // TURN server authentication information\n                putString(\"secret\", \"{secret}\")                         // TURN server authentication information\n            }\n        )\n    )\n    putString(\"iceTransportsType\", \"{iceTransportsType}\")           // Specify the Peer-to-peer connection method using one of the values: All, NoHost, Relay\n}\n\nfindNavController().navigate(R.id.action_HostFragment_to_StreamFragment, args = args)\n</code></pre>"},{"location":"en/sdk/android/#custom-development","title":"Custom Development","text":"<p>For additional features not provided in the easy usage, or for custom implementation of UI/UX, it is recommended to implement it yourself.</p> <p>Please refer to the Key Feature Specifications described later for usage instructions.</p> <p>If you want to change the design and functionality of the screen, please refer to the <code>StreamFragment.kt</code> file and the <code>fragment_stream.xml</code> file.</p> <p>For detailed API specifications, please refer to Android APIs.</p>"},{"location":"en/sdk/android/#key-feature-specifications","title":"Key Feature Specifications","text":"<p>You can create and implement screen functions yourself using the API.</p>"},{"location":"en/sdk/android/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>// Initialization\n// Use the same values for accessKey, signalEndpoint, serverEndpoints as used when creating args\nval liveStylerManager: LiveStylerManager = LiveStylerManager(\n    \"{credential}\",\n    \"{apiEndpoint}\",\n    \"{signalEndpoint}\",\n    listOf( {serverEndpoints} ),\n    \"{iceTransportsType}\"\n)\n</code></pre>"},{"location":"en/sdk/android/#oncreate","title":"onCreate()","text":"<p>Performs necessary tasks during initialization.</p> <pre><code>override fun onCreate(saveInstance?: Bundle) {\n    super.onCreate(saveInstance)\n    liveStyleManager.onCreate(requireContext(), this)\n}\n</code></pre>"},{"location":"en/sdk/android/#oncreateview","title":"onCreateView()","text":"<p>Performs necessary tasks before the view is created.</p> <pre><code>override fun onCreateView(\n    inflater: LayoutInflater, container: ViewGroup?,\n    savedInstanceState: Bundle?\n): View {\n    _binding = FragmentStreamBinding.inflate(inflater, container, false)\n    liveStylerManager.onCreateView(this, this)\n    return binding.root\n}\n</code></pre>"},{"location":"en/sdk/android/#onviewcreated","title":"onViewCreated()","text":"<p>Passes the created view to the manager. You can selectively add a camera preview or a render preview.</p> <pre><code>override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    liveStylerManager.onViewCreated(binding.preview, binding.renderView)\n}\n</code></pre>"},{"location":"en/sdk/android/#onpause","title":"onPause()","text":"<p>Stops camera capture.</p> <pre><code>override fun onPause() {\n    super.onPause()\n    liveStylerManager.onPause()\n}\n</code></pre>"},{"location":"en/sdk/android/#onresume","title":"onResume()","text":"<p>Resumes camera capture. Resets the signal server connection and WebRTC connection.</p> <pre><code>override fun onResume() {\n    super.onResume()\n    liveStylerManager.onResume()\n}\n</code></pre>"},{"location":"en/sdk/android/#onstop","title":"onStop()","text":"<p>Releases camera resources. Disconnects from the signal server and WebRTC and waits.</p> <pre><code>override fun onStop() {\n    liveStylerManager.onStop()\n    super.onStop()\n}\n</code></pre>"},{"location":"en/sdk/android/#ondestroy","title":"onDestroy()","text":"<p>Completely terminates the signal server connection and WebRTC connection.</p> <pre><code>override fun onDestroyView() {\n    liveStylerManager.onDestroy()\n    _binding = null\n    super.onDestroyView()\n}\n</code></pre>"},{"location":"en/sdk/android/#changefilterstring","title":"changeFilter(String)","text":"<p>Changes the filter set on the WebRTC server.</p> <pre><code>liveStylerManager.changeFilter(\"{filter_id}\")\n</code></pre> <ul> <li>filter_id: The ID of the filter you want to change from the filter list received via the API.</li> </ul>"},{"location":"en/sdk/android/#switchcamerastring","title":"switchCamera(String)","text":"<p>Switches to the camera with the received camera ID. The camera ID can be obtained through the CameraManager.</p> <pre><code>liveStylerManager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li>camera_id: The ID of the camera obtained through CameraManager (Android system tool).</li> </ul>"},{"location":"en/sdk/android/#updatefiltercategory","title":"updateFilterCategory()","text":"<p>Updates the filter and category lists by fetching them from the API server. The filter list is automatically updated upon connecting to the signal server. The updated list is delivered through the SignalStateListener.</p> <pre><code>liveStylerManager.updateFilterCategory()\n</code></pre>"},{"location":"en/sdk/android/#changemodelstring","title":"changeModel(String)","text":"<p>Changes the filter model to the received model name. Use the model name found in the filter information (FilterCategoryData) obtained through the onReceivedFilterList() callback.</p> <pre><code>liveStylerManager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li>model_name: The model name from FilterCategoryData.</li> </ul> <p>The Android SDK includes processing to fetch the model list via the API. However, the API reflected in the SDK is a service provided by LiveStyler, so there may be differences from the actual service. The API may vary depending on the service configuration, so please refer to the API guide to check and use the model list.</p>"},{"location":"en/sdk/flutter-streampagedart-web/","title":"stream_page.dart Source Code","text":"<pre><code>import 'dart:async';\nimport 'dart:html' as html;\nimport 'dart:js' as js;\nimport 'dart:math';\nimport 'dart:ui';\n\nimport 'package:cached_network_image/cached_network_image.dart';\nimport 'package:easy_localization/easy_localization.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_svg/flutter_svg.dart';\nimport 'package:flutter_webrtc/flutter_webrtc.dart';\nimport 'package:livestyler_web_demo/data/settings.dart';\nimport 'package:livestyler_web_demo/main.dart';\nimport 'package:livestyler_web_demo/sdk/data/filter_category_data.dart';\nimport 'package:livestyler_web_demo/sdk/livestyler_manager.dart';\nimport 'package:livestyler_web_demo/sdk/signal/signal_state_listener.dart';\nimport 'package:livestyler_web_demo/sdk/stream/data_channel_listener.dart';\nimport 'package:livestyler_web_demo/sdk/stream/stream_stats_data.dart';\nimport 'package:livestyler_web_demo/sdk/stream/stun_turn_server.dart';\nimport 'package:livestyler_web_demo/sdk/util/layout_support.dart';\n\n/// Page responsible for real-time streaming and filter application\nclass StreamPage extends StatefulWidget {\n  final _id = Random().nextInt(2^256);\n\n  StreamPage({super.key, this.showTopbarControl = false});\n\n  final bool showTopbarControl;\n\n  @override\n  State&lt;StreamPage&gt; createState() =&gt; _StreamPageState();\n}\n\n/// Class that manages StreamPage state\n/// Implements SignalStateListener and DataChannelStateListener to monitor communication status\nclass _StreamPageState extends State&lt;StreamPage&gt; with SingleTickerProviderStateMixin implements SignalStateListener, DataChannelStateListener {\n  // GlobalKeys for UI components\n  final _topAreaKey = GlobalKey();\n  final _topLogoKey = GlobalKey();\n  final _topTimerKey = GlobalKey();\n  final _stylePanelKey = GlobalKey();\n  final _styleCategoryKey = GlobalKey();\n  final _styleModelKey = GlobalKey();\n  final _stylePanelBackwardKey = GlobalKey();\n  final _stylePanelForwardKey = GlobalKey();\n\n  // WebRTC video renderers\n  final _localRenderer = RTCVideoRenderer();\n  final _remoteRenderer = RTCVideoRenderer();\n\n  final _previewKey = GlobalKey();\n  final _remoteKey = GlobalKey();\n\n  final _previewContainerKey = GlobalKey();\n  final ValueNotifier&lt;bool&gt; _showPreview = ValueNotifier(false);\n\n  // LiveStyler manager and statistics data\n  late LiveStylerManager _liveStylerManager;\n\n  // Filter-related state\n  final ValueNotifier&lt;List&lt;FilterCategoryData&gt;&gt; _filterCategoryList = ValueNotifier([]);\n  final ValueNotifier&lt;int&gt; _selectedCategoryIndex = ValueNotifier(0);\n  final ValueNotifier&lt;String?&gt; _selectedModelName = ValueNotifier('romatic');\n\n  @override\n  void initState() {\n    super.initState();\n    _initManager();\n  }\n\n  /// Initialize and configure LiveStyler manager\n  void _initManager() {\n    _liveStylerManager = LiveStylerManager(\n      credential: AppEnv.credential,\n      apiEndpoint: AppEnv.apiEndpoint,\n      signalEndpoint: AppEnv.signalEndpoint,\n      iceServerList: AppEnv.iceServers.map((server) {\n        return StunTurnServer(\n          endpoint: server['endpoint'] ?? '',\n          username: server['username'],\n          password: server['password'],\n          secret: server['secret'],\n        );\n      }).toList(),\n      iceTransportsType: iceTransportsTypeRelay,\n      localRenderer: _localRenderer,\n      remoteRenderer: _remoteRenderer,\n      signalStateListener: this,\n      rendererStateListener: null,\n      dataChannelStateListener: this,\n    );\n    _liveStylerManager.initialize();\n    _liveStylerManager.updateFilterCategory();\n  }\n\n  @override\n  void dispose() {\n    _liveStylerManager.release();\n    super.dispose();\n  }\n\n  /// Top area (logo and timer) UI composition\n  Widget _topArea(BuildContext context, Size screenSize) {\n    final layoutKind = screenSize.width.layoutKind;\n\n    // Size and padding settings according to layout type\n    late double layoutHeight;\n    late EdgeInsets padding;\n    late Size logoSize;\n    switch (layoutKind) {\n      case LayoutKind.nowSupported:\n      case LayoutKind.smallScreen:\n      case LayoutKind.mobile:\n        layoutHeight = 72;\n        padding = const EdgeInsets.symmetric(horizontal: 25, vertical: 16);\n        logoSize = const Size(178, 28);\n        break;\n      case LayoutKind.tablet:\n        layoutHeight = 84;\n        padding = const EdgeInsets.symmetric(horizontal: 32, vertical: 20);\n        logoSize = const Size(240, 35);\n        break;\n      case LayoutKind.desktop:\n      case LayoutKind.largeDesktop:\n        layoutHeight = 90;\n        padding = const EdgeInsets.symmetric(horizontal: 106, vertical: 23);\n        logoSize = const Size(240, 35);\n        break;\n    }\n\n    return AnimatedContainer(\n      key: _topAreaKey,\n      duration: const Duration(milliseconds: 250),\n      width: double.infinity,\n      height: layoutHeight,\n      decoration: const BoxDecoration(\n        gradient: LinearGradient(\n          colors: [\n            Color(0xff000000),\n            Color(0x00000000),\n          ],\n          begin: Alignment.topCenter,\n          end: Alignment.bottomCenter,\n        ),\n      ),\n      clipBehavior: Clip.hardEdge,\n      padding: padding,\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.start,\n        crossAxisAlignment: CrossAxisAlignment.center,\n        children: [\n          Expanded(\n            flex: 0,\n            child: SizedBox(\n              width: logoSize.width,\n              height: logoSize.height,\n              child: SvgPicture.asset(\n                'images/svg/ic_top_area_logo.svg',\n                key: _topLogoKey,\n                width: logoSize.width,\n                height: logoSize.height,\n              ),\n            ),\n          ),\n          const Spacer(),\n        ]\n      ),\n    );\n  }\n\n  /// Style panel (filter category and model selection) UI composition\n  Widget _stylePanel(BuildContext context, Size screenSize) {\n    final layoutKind = screenSize.width.layoutKind;\n\n    // Style panel settings according to layout type\n    late EdgeInsets stylePanelMargin;\n    late BoxDecoration stylePanelDecoration;\n    late BoxConstraints stylePanelConstraints;\n    const stylePanelHeight = 194.0;\n    switch (layoutKind) {\n      case LayoutKind.nowSupported:\n      case LayoutKind.smallScreen:\n      case LayoutKind.mobile:\n        stylePanelMargin = EdgeInsets.zero;\n        stylePanelDecoration = BoxDecoration(\n          border: Border.all(\n            width: 1,\n            color: const Color(0xff373444),\n            style: BorderStyle.solid,\n          ),\n          gradient: const LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xff1A1822),\n              Color(0xff0A090D),\n            ],\n          ),\n        );\n        stylePanelConstraints = BoxConstraints(\n          minWidth: screenSize.width,\n          maxWidth: screenSize.width,\n          minHeight: 194,\n          maxHeight: 194,\n        );\n        break;\n      case LayoutKind.tablet:\n        stylePanelMargin = const EdgeInsets.symmetric(horizontal: 75, vertical: 24);\n        stylePanelDecoration = BoxDecoration(\n          borderRadius: const BorderRadius.all(Radius.circular(16)),\n          border: Border.all(\n            width: 1,\n            color: const Color(0xff373444),\n            style: BorderStyle.solid,\n          ),\n          gradient: const LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xff1A1822),\n              Color(0xff0A090D),\n            ],\n          ),\n        );\n        stylePanelConstraints = const BoxConstraints(\n          maxWidth: 659,\n          minHeight: 194,\n          maxHeight: 194,\n        );\n        break;\n      case LayoutKind.desktop:\n      case LayoutKind.largeDesktop:\n        stylePanelMargin = const EdgeInsets.symmetric(horizontal: 75, vertical: 24);\n        stylePanelDecoration = BoxDecoration(\n          borderRadius: const BorderRadius.all(Radius.circular(16)),\n          border: Border.all(\n            width: 1,\n            color: const Color(0xff373444),\n            style: BorderStyle.solid,\n          ),\n          gradient: const LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xff1A1822),\n              Color(0xff0A090D),\n            ],\n          ),\n        );\n        stylePanelConstraints = const BoxConstraints(\n          maxWidth: 824,\n          minHeight: 194,\n          maxHeight: 194,\n        );\n        break;\n    }\n\n    return ValueListenableBuilder&lt;List&lt;FilterCategoryData&gt;&gt;(\n      valueListenable: _filterCategoryList,\n      builder: (context, filterCategoryList, child) {\n        if (filterCategoryList.isEmpty) {\n          return AnimatedContainer(\n            key: _stylePanelKey,\n            duration: const Duration(milliseconds: 250),\n            margin: stylePanelMargin,\n            height: stylePanelHeight,\n            constraints: stylePanelConstraints,\n            decoration: stylePanelDecoration,\n            clipBehavior: Clip.hardEdge,\n            child: const Center(\n              child: Text(\n                'Loading...',\n                style: TextStyle(\n                  color: Color(0xffD8DBE5),\n                  fontWeight: FontWeight.w500,\n                  fontSize: 14,\n                  height: 1,\n                  letterSpacing: 0,\n                ),\n                textAlign: TextAlign.center,\n              ),\n            ),\n          );\n        } else {\n          return AnimatedContainer(\n            key: _stylePanelKey,\n            duration: const Duration(milliseconds: 250),\n            margin: stylePanelMargin,\n            height: stylePanelHeight,\n            constraints: stylePanelConstraints,\n            decoration: stylePanelDecoration,\n            clipBehavior: Clip.hardEdge,\n            child: ValueListenableBuilder&lt;int&gt;(\n              valueListenable: _selectedCategoryIndex,\n              builder: (context, selectedCategoryIndex, child) {\n                final selectedCategoryData = filterCategoryList[selectedCategoryIndex];\n\n                return SizedBox.expand(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.start,\n                    crossAxisAlignment: CrossAxisAlignment.stretch,\n                    children: [\n                      Expanded(\n                        flex: 52,\n                        child: ListView.builder(\n                          key: _styleCategoryKey,\n                          scrollDirection: Axis.horizontal,\n                          padding: const EdgeInsets.only(\n                            left: 16,\n                            top: 12,\n                            right: 16,\n                            bottom: 4,\n                          ),\n                          itemCount: filterCategoryList.length,\n                          itemBuilder: (context, index) {\n                            final categoryData = filterCategoryList[index];\n                            return _StyleHeaderItemWidget(\n                              categoryData: categoryData,\n                              index: index,\n                              selectedCategoryIndex: selectedCategoryIndex,\n                              selectedCategoryIndexNotifier: _selectedCategoryIndex,\n                            );\n                          },\n                        ),\n                      ),\n                      Expanded(\n                        flex: 142,\n                        child: ValueListenableBuilder&lt;String?&gt;(\n                          valueListenable: _selectedModelName,\n                          builder: (context, selectedModelName, child) {\n                            return ListView.builder(\n                              key: _styleModelKey,\n                              scrollDirection: Axis.horizontal,\n                              padding: const EdgeInsets.only(\n                                left: 16,\n                                top: 4,\n                                right: 16,\n                                bottom: 16,\n                              ),\n                              itemCount: selectedCategoryData.filters.length,\n                              itemBuilder: (context, index) {\n                                final filterData = selectedCategoryData.filters[index];\n                                return _StyleModelItemWidget(\n                                  filterData: filterData,\n                                  index: index,\n                                  selectedModelName: selectedModelName,\n                                  onSelectedModel: (modelName) {\n                                    _liveStylerManager.changeModel(modelName);\n                                    _selectedModelName.value = modelName;\n                                    html.window.sessionStorage['selected_model_name'] = modelName;\n                                  },\n                                );\n                              },\n                            );\n                          },\n                        ),\n                      ),\n                    ],\n                  ),\n                );\n              },\n            ),\n          );\n        }\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final windowSize = MediaQuery.of(context).size;\n    final maxSize = max(windowSize.width, windowSize.height);\n    final maxWidth = max(maxSize / 4, 320.0);\n    final maxHeight = maxWidth / 16 * 9;\n\n    return Scaffold(\n      appBar: widget.showTopbarControl ? AppBar(\n        actions: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.start,\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              Text(\n                'Reload',\n                style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                  fontWeight: FontWeight.w700,\n                  color: Colors.white,\n                ),\n              ),\n              const SizedBox(\n                width: 8,\n              ),\n              IconButton(\n                icon: const Icon(Icons.refresh_rounded),\n                onPressed: () {\n                  Navigator.of(context).pushReplacementNamed('/stream');\n                },\n              ),\n            ],\n          ),\n          const SizedBox(\n            width: 32,\n          ),\n          ValueListenableBuilder&lt;bool&gt;(\n            valueListenable: _showPreview,\n            builder: (context, isShow, child) {\n              return Row(\n                mainAxisAlignment: MainAxisAlignment.start,\n                crossAxisAlignment: CrossAxisAlignment.center,\n                children: [\n                  Text(\n                    'Preview',\n                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(\n                      fontWeight: FontWeight.w700,\n                      color: Colors.white,\n                    ),\n                  ),\n                  const SizedBox(\n                    width: 8,\n                  ),\n                  Text(\n                    'Off',\n                    style: Theme.of(context).textTheme.labelSmall?.copyWith(\n                      fontWeight: FontWeight.w700,\n                      color: Colors.white54,\n                    ),\n                  ),\n                  Switch.adaptive(\n                    value: isShow,\n                    onChanged: (value) {\n                      _showPreview.value = value;\n                    },\n                  ),\n                  Text(\n                    'On',\n                    style: Theme.of(context).textTheme.labelSmall?.copyWith(\n                      fontWeight: FontWeight.w700,\n                      color: Colors.white,\n                    ),\n                  )\n                ],\n              );\n            },\n          ),\n          const SizedBox(\n            width: 32,\n          ),\n        ],\n      ) : null,\n      body: SizedBox.expand(\n        child: ValueListenableBuilder&lt;ServerState&gt;(\n          valueListenable: _liveStylerManager,\n          builder: (context, serverState, child) {\n            switch (serverState) {\n              case ServerState.connected:\n                _startRunning();\n                break;\n              default:\n                _stopRunning();\n                break;\n            }\n\n            return Stack(\n              children: [\n                SizedBox.expand(\n                  child: Container(\n                    color: Colors.black,\n                    child: RTCVideoView(\n                      key: _remoteKey,\n                      _remoteRenderer,\n                      filterQuality: FilterQuality.high,\n                      objectFit: RTCVideoViewObjectFit.RTCVideoViewObjectFitCover,\n                      placeholderBuilder: (context) {\n                        return Container(\n                          color: const Color(0xff191624),\n                          alignment: Alignment.center,\n                          child: SizedBox(\n                            width: 104,\n                            height: 104,\n                            child: SvgPicture.asset(\n                              'images/svg/ic_tabler_video-off.svg',\n                              width: 104,\n                              height: 104,\n                            ),\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                ),\n                Positioned(\n                  left: 80,\n                  top: 32 + 32.5 + 32,\n                  right: 80,\n                  bottom: 32,\n                  child: Align(\n                    alignment: Alignment.topLeft,\n                    child: ValueListenableBuilder&lt;bool&gt;(\n                      valueListenable: _showPreview,\n                      builder: (context, isShow, child) {\n                        return Opacity(\n                          key: _previewContainerKey,\n                          opacity: isShow ? 1 : 0,\n                          child: Container(\n                            width: maxWidth,\n                            height: maxHeight,\n                            decoration: BoxDecoration(\n                              color: Colors.white,\n                              border: Border.all(color: Colors.white, width: 2),\n                            ),\n                            child: RTCVideoView(\n                              key: _previewKey,\n                              _localRenderer,\n                            ),\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                ),\n\n                // top area\n                Positioned(\n                  child: Align(\n                    alignment: Alignment.topCenter,\n                    child: _topArea(context, windowSize),\n                  ),\n                ),\n\n                // style panel\n                Positioned(\n                  child: Align(\n                    alignment: Alignment.bottomCenter,\n                    child: _stylePanel(context, windowSize),\n                  ),\n                ),\n              ],\n            );\n          },\n        ),\n      ),\n    );\n  }\n\n  // SignalStateListener implementation\n  @override\n  void onServerPreparing() {\n    // Handle server preparing state\n  }\n\n  @override\n  void onServerReady() {\n    // Handle server ready state\n  }\n\n  @override\n  void onReceivedFilterList(List&lt;FilterCategoryData&gt; filterList) {\n    debugPrint('[SignalStateListener] onReceivedFilterList $filterList');\n    _filterCategoryList.value = filterList;\n  }\n\n  @override\n  void onErrorFilterList(String? error) {\n    // Handle filter list load error\n  }\n\n  // DataChannelStateListener implementation\n  @override\n  void onBufferedAmountChange(int previousAmount) {\n    // Handle data channel buffer amount change\n  }\n\n  @override\n  void onDataChannelMessage(RTCDataChannel? dataChannel, String? message) {\n    // Handle data channel message reception\n  }\n\n  @override\n  void onDataChannelStateChange(RTCDataChannelState state) {\n    debugPrint('[DataChannelStateListener] onDataChannelStateChange $state');\n    // Apply recently selected model when data channel opens\n    if (state == RTCDataChannelState.RTCDataChannelOpen) {\n      final recentlyModelName = html.window.sessionStorage['selected_model_name'] ?? 'romantic';\n      _liveStylerManager.changeModel(recentlyModelName);\n    }\n  }\n}\n\n/// Filter category header item widget\nclass _StyleHeaderItemWidget extends StatelessWidget {\n  final FilterCategoryData categoryData;\n  final int index;\n  final int selectedCategoryIndex;\n  final ValueNotifier&lt;int&gt; selectedCategoryIndexNotifier;\n\n  const _StyleHeaderItemWidget({\n    super.key,\n    required this.categoryData,\n    required this.index,\n    required this.selectedCategoryIndex,\n    required this.selectedCategoryIndexNotifier,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: 80,\n      height: 36,\n      decoration: BoxDecoration(\n        color:\n            (index == selectedCategoryIndex) ? const Color(0xff2C2938) : null,\n        borderRadius: const BorderRadius.all(Radius.circular(10)),\n      ),\n      clipBehavior: Clip.hardEdge,\n      child: Material(\n        color: Colors.transparent,\n        child: InkWell(\n          onTap: () {\n            selectedCategoryIndexNotifier.value = index;\n          },\n          child: Padding(\n            padding: const EdgeInsets.all(2),\n            child: FittedBox(\n              fit: BoxFit.scaleDown,\n              child: Text(\n                EasyLocalization.of(context)?.locale.languageCode.startsWith('ko') == true ? categoryData.nameKo : categoryData.nameEn,\n                style: TextStyle(\n                  color: (index == selectedCategoryIndex) ? Colors.white : Colors.white54,\n                  fontWeight: FontWeight.w500,\n                  fontSize: 16,\n                  height: 16 / 20,\n                  letterSpacing: 0,\n                ),\n                textAlign: TextAlign.center,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n/// Filter model item widget\nclass _StyleModelItemWidget extends StatelessWidget {\n  final FilterItemData filterData;\n  final int index;\n  final String? selectedModelName;\n  final void Function(String modelName)? onSelectedModel;\n\n  const _StyleModelItemWidget({\n    super.key,\n    required this.filterData,\n    required this.index,\n    required this.selectedModelName,\n    required this.onSelectedModel,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      color: Colors.transparent,\n      child: InkWell(\n        onTap: () {\n          onSelectedModel?.call(filterData.code);\n        },\n        child: Container(\n          width: 84,\n          height: 122,\n          padding: const EdgeInsets.only(left: 6, top: 6, right: 6, bottom: 6),\n          decoration: BoxDecoration(\n            color: (filterData.code == selectedModelName) ? const Color(0xff5A5AFF).withOpacity(0.1) : null,\n            borderRadius: const BorderRadius.all(Radius.circular(10)),\n            border: Border.all(\n              color: (filterData.code == selectedModelName) ? const Color(0xff5A5AFF) : Colors.transparent,\n            ),\n          ),\n          clipBehavior: Clip.hardEdge,\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.start,\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: [\n              Expanded(\n                flex: 0,\n                child: Container(\n                  width: 72,\n                  height: 72,\n                  decoration: const BoxDecoration(\n                    borderRadius: BorderRadius.all(Radius.circular(8)),\n                  ),\n                  clipBehavior: Clip.hardEdge,\n                  child: AspectRatio(\n                    aspectRatio: 1,\n                    child: CachedNetworkImage(\n                      imageUrl: filterData.imageUrl,\n                      fit: BoxFit.cover,\n                    ),\n                  ),\n                ),\n              ),\n              const SizedBox(\n                height: 8,\n              ),\n              Expanded(\n                flex: 0,\n                child: FittedBox(\n                  fit: BoxFit.scaleDown,\n                  child: Text(\n                    EasyLocalization.of(context)?.locale.languageCode.startsWith('ko') == true ? filterData.nameKo : filterData.nameEn,\n                    style: TextStyle(\n                      color: (filterData.code == selectedModelName) ? Colors.white : const Color(0xffD8DBE5),\n                      fontWeight: FontWeight.w500,\n                      fontSize: 14,\n                      height: 1,\n                      letterSpacing: 0,\n                    ),\n                    textAlign: TextAlign.center,\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"en/sdk/flutter-web/","title":"LiveStyler SDK for Flutter Web, Desktop (macOS, Windows)","text":"<p>This SDK is for applying LiveStyler features to the Flutter Cross-Platform. The SDK provides functionality to initialize the camera, send the captured video, and receive and display the video after processing is complete.</p>"},{"location":"en/sdk/flutter-web/#getting-started","title":"Getting Started","text":""},{"location":"en/sdk/flutter-web/#requirements","title":"Requirements","text":"<ul> <li>Web<ul> <li>Windows 10 or higher, macOS 13.0 or higher<ul> <li>Flutter 3.24.5 or higher</li> <li>Chrome browser 100 or higher</li> </ul> </li> </ul> </li> <li>Desktop<ul> <li>Windows 10 or higher<ul> <li>Flutter 3.24.5 or higher</li> </ul> </li> <li>macOS 13.0 or higher<ul> <li>Xcode 12.0 or higher</li> <li>Swift 5.0 or higher</li> </ul> </li> </ul> </li> </ul>"},{"location":"en/sdk/flutter-web/#key-features","title":"Key Features","text":"<ul> <li>Control video conversion through a signaling channel</li> <li>Send camera video to a WebRTC server</li> <li>Receive video with filters applied</li> </ul>"},{"location":"en/sdk/flutter-web/#installation","title":"Installation","text":""},{"location":"en/sdk/flutter-web/#pub","title":"Pub","text":"<pre><code># pubspec.yaml\n\ndependencies:\n  # Preparing storage.\n  livestyler_sdk_flutter_web:\n    git:\n      url: https://github.com/dob-world/LiveStylerSDKFlutterWebDesktop.git\n      ref: 0.0.1\n</code></pre> <p>And then run the following command:</p> <pre><code>$ flutter pub get\n</code></pre>"},{"location":"en/sdk/flutter-web/#how-to-use","title":"How to Use","text":""},{"location":"en/sdk/flutter-web/#easy-usage","title":"Easy Usage","text":"<p>You can use the pre-implemented <code>StreamPage</code>.</p> <pre><code>// Environment Initialization\nAppEnv.setEnv(\n    credential: '{credential}',\n    apiEndpoint: '{apiEndpoint}',\n    signalEndpoint: '{signalEndpoint}',\n    iceServers: '{iceServers}',\n    onTrialStarted: () {\n      // Handle trial started\n    },\n    onTrialEnded: () {\n      // Handle trial ended\n    },\n    language: '{language}',\n);\n\n\n// Navigate to the screen\nNavigator.of(context).push(\n    MaterialPageRoute(\n        builder: (context) {\n            return StreamPage();\n        },\n    ),\n);\n</code></pre>"},{"location":"en/sdk/flutter-web/#custom-development","title":"Custom Development","text":"<p>For additional features not provided in the easy usage, or for custom implementation of UI/UX, it is recommended to implement it yourself.</p> <p>Please refer to the Key Feature Specifications described later for usage instructions.</p> <p>If you want to change the design and functionality of the screen, please refer to the <code>stream_page.dart</code> file.</p> <p>For detailed API specifications, please refer to Flutter Web APIs.</p>"},{"location":"en/sdk/flutter-web/#key-feature-specifications","title":"Key Feature Specifications","text":"<p>You can create and implement screen functions yourself using the API.</p>"},{"location":"en/sdk/flutter-web/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>_liveStylerManager = LiveStylerManager(\n    credential: '{credential}',\n    apiEndpoint: '{apiEndpoint}',\n    signalEndpoint: '{signalEndpoint}',\n    iceServerList: '{iceServers}',\n    iceTransportsType: 'Relay',\n    localRenderer: {localRenderer},\n    remoteRenderer: {remoteRenderer},\n    signalStateListener: {signalStateListener},\n    rendererStateListener: {rendererStateListener},\n    dataChannelStateListener: {dataChannelStateListener},\n    onReceiveStatsData: {onReceiveStatsData},\n);\n</code></pre> <ul> <li><code>credential</code>: Authentication token issued through the admin page.</li> <li><code>apiEndpoint</code>: API server to get service information.</li> <li><code>signalEndpoint</code>: Signaling channel endpoint address for exchanging authentication information with the backend.</li> <li><code>iceServers</code>: Set STUN and TURN servers. It is recommended to use the provided Google STUN server.</li> <li><code>iceTransportsType</code>: Specify the Peer-to-peer connection method using one of the values: All, NoHost, Relay.</li> <li><code>localRenderer</code>: Renderer for the WebRTC local stream (RTCVideoRenderer).</li> <li><code>remoteRenderer</code>: Renderer for the WebRTC remote stream (RTCVideoRenderer).</li> <li><code>signalStateListener</code>: Handles events from the signaling channel.</li> <li><code>rendererStateListener</code>: Handles events from the renderer.</li> <li><code>dataChannelStateListener</code>: Handles events from the data channel.</li> <li><code>onReceiveStatsData</code>: Callback function that receives playback statistics.</li> </ul>"},{"location":"en/sdk/flutter-web/#initialize","title":"initialize()","text":"<p>Performs necessary tasks during initialization.</p> <pre><code>@override\nvoid initState() {\n    super.initState();\n    _liveStylerManager.initialize();\n}\n</code></pre>"},{"location":"en/sdk/flutter-web/#release","title":"release()","text":"<p>Completely terminates the signal server and WebRTC connections and releases resources.</p> <pre><code>@override\nvoid dispose() {\n    _liveStylerManager.release();\n    super.dispose();\n}\n</code></pre>"},{"location":"en/sdk/flutter-web/#updatefiltercategory","title":"updateFilterCategory()","text":"<p>Updates the filter and category lists by fetching them from the API server. The filter list is automatically updated upon connecting to the signal server. The updated list is delivered through the SignalStateListener.</p> <pre><code>_liveStylerManager.updateFilterCategory();\n</code></pre>"},{"location":"en/sdk/flutter-web/#switchcamerastring","title":"switchCamera(String)","text":"<p>Switches to the camera with the received camera ID. The camera ID can be obtained through MediaDevices.</p> <pre><code>_liveStylerManager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li><code>camera_id</code>: The ID of the camera obtained through MediaDevices.</li> </ul>"},{"location":"en/sdk/flutter-web/#changemodelstring","title":"changeModel(String)","text":"<p>Changes the filter model to the received model name.</p> <pre><code>_liveStylerManager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li><code>model_name</code>: The model name from FilterCategoryData.</li> </ul>"},{"location":"en/sdk/flutter-web/#appenv","title":"AppEnv","text":"<p>The AppEnv class manages application environment settings.</p> <pre><code>// Environment setup\nAppEnv.setEnv(\n    credential: '{credential}',\n    apiEndpoint: '{apiEndpoint}',\n    signalEndpoint: '{signalEndpoint}',\n    iceServers: '{iceServers}',\n    onTrialStarted: () {\n      // Handle trial started\n    },\n    onTrialEnded: () {\n      // Handle trial ended\n    },\n    onChangeLanguage: (lang) {\n      // Handle language change\n    },\n    language: '{language}',\n);\n</code></pre> <ul> <li><code>credential</code>: Authentication information.</li> <li><code>apiEndpoint</code>: API endpoint URL.</li> <li><code>signalEndpoint</code>: Signaling server endpoint URL.</li> <li><code>iceServers</code>: ICE server settings.</li> <li><code>onTrialStarted</code>: Trial start callback.</li> <li><code>onTrialEnded</code>: Trial end callback.</li> <li><code>onChangeLanguage</code>: Language change callback.</li> <li><code>language</code>: Initial language setting.</li> </ul>"},{"location":"en/sdk/flutter-web/#usage-example","title":"Usage Example","text":"<pre><code>void main() async {\n  // Environment setup\n  AppEnv.setEnv(\n    credential: 'your_credential',\n    apiEndpoint: 'https://api.example.com',\n    signalEndpoint: 'wss://signal.example.com',\n    iceServers: [\n      {'urls': 'stun:stun.example.com:19302'},\n    ],\n    language: 'en-US',\n  );\n\n  // Initialize LiveStylerManager\n  final manager = LiveStylerManager(\n    credential: AppEnv.credential,\n    apiEndpoint: AppEnv.apiEndpoint,\n    signalEndpoint: AppEnv.signalEndpoint,\n    iceServerList: AppEnv.iceServers.map((server) =&gt; StunTurnServer.fromJson(server)).toList(),\n    localRenderer: RTCVideoRenderer(),\n    remoteRenderer: RTCVideoRenderer(),\n    signalStateListener: YourSignalStateListener(),\n    rendererStateListener: YourRendererStateListener(),\n    dataChannelStateListener: YourDataChannelStateListener(),\n    onReceiveStatsData: (stats) {\n      print('Received stats: $stats');\n    },\n  );\n\n  await manager.initialize();\n  await manager.start();\n\n  // Change style model\n  await manager.changeModel('romantic');\n\n  // Switch camera\n  await manager.switchCamera('front_camera_id');\n\n  // Stop connection\n  await manager.stop();\n}\n</code></pre>"},{"location":"en/sdk/flutter/","title":"LiveStyler SDK for Flutter(Android, iOS)","text":"<p>This SDK is for applying LiveStyler functionality to Flutter cross-platform applications. The SDK provides functionality to initialize the camera, transmit captured video, and receive and display processed video.</p>"},{"location":"en/sdk/flutter/#getting-started","title":"Getting Started","text":""},{"location":"en/sdk/flutter/#requirements","title":"Requirements","text":"<ul> <li>Flutter 3.24.5 or higher</li> <li>Android 9.0 or higher<ul> <li>AGP 8.0 or higher</li> <li>Kotlin 1.7.21 or higher</li> </ul> </li> <li>iOS 12.0 or higher<ul> <li>Xcode 12.0 or higher</li> <li>Swift 5.0 or higher</li> </ul> </li> </ul>"},{"location":"en/sdk/flutter/#key-features","title":"Key Features","text":"<ul> <li>Control video transformation through signal channels</li> <li>Transmit camera video to WebRTC server</li> <li>Receive filtered video</li> </ul>"},{"location":"en/sdk/flutter/#installation","title":"Installation","text":""},{"location":"en/sdk/flutter/#gradle","title":"Gradle","text":"<pre><code>// pubspec.yml\n\ndependencies:\n    livestayler_sdk_flutter:\n        # Preparing storage.\n        git: https://github.com/dob-world/LiveStylerSDKFlutter.git\n        ref: 0.0.1\n</code></pre> <p>Then run the following command:</p> <pre><code>$ flutter pub get\n</code></pre>"},{"location":"en/sdk/flutter/#how-to-use","title":"How to Use","text":""},{"location":"en/sdk/flutter/#easy-usage","title":"Easy Usage","text":"<p>You can use the pre-implemented <code>StreamPage</code>.</p> <pre><code>// Environment initialization\nAppEnv.setEnv(\n    '{credential}',\n    '{apiEndpoint}',\n    '{signalEndpoint}',\n    '{iceServers}',\n    '{onTrialStarted}',\n    '{onTrialEnded}',\n    '{language}',\n);\n\n// Navigate to screen\nNavigator.of(context).push(\n    MaterialPageRoute(\n        builder: (context) {\n            return StreamPage();\n        },\n    ),\n);\n</code></pre>"},{"location":"en/sdk/flutter/#custom-development","title":"Custom Development","text":"<p>For additional features not provided in the easy usage and custom UI/UX implementation, it's better to implement directly.</p> <p>Please refer to the Key Feature Specifications described below for usage instructions.</p> <p>If you want to change the screen design and functionality, please refer to the <code>stream_page.dart</code> file.</p> <p>For detailed API specifications, please refer to Flutter Web APIs.</p>"},{"location":"en/sdk/flutter/#key-feature-specifications","title":"Key Feature Specifications","text":"<p>You can directly create and implement screen functionality using the API.</p>"},{"location":"en/sdk/flutter/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>_liveStylerManager = LiveStylerManager(\n    credential: '{credential}',\n    apiEndpoint: '{apiEndpoint}',\n    signalEndpoint: '{signalEndpoint}',\n    iceServerList: '{iceServers}',\n    iceTransportsType: 'Relay',\n    localRenderer: {localRenderer},\n    remoteRenderer: {remoteRenderer},\n    signalStateListener: {signalStateListener},\n    rendererStateListener: {rendererStateListener},\n    dataChannelStateListener: {dataChannelStateListener},\n    onReceiveStatsData: {onReceiveStatsData},\n);\n</code></pre> <ul> <li><code>credential</code>: Authentication token issued through the admin page</li> <li><code>apiEndpoint</code>: API server where service information can be obtained</li> <li><code>signalEndpoint</code>: Signal channel endpoint address for exchanging authentication information with the backend</li> <li><code>iceServers</code>: Configure STUN and TURN servers; using the provided Google STUN server is recommended</li> <li><code>iceTransportsType</code>: Specify peer-to-peer connection method using one of All, NoHost, or Relay values</li> <li><code>localRenderer</code>: Renderer for rendering WebRTC streams (RTCVideoRenderer)</li> <li><code>remoteRenderer</code>: Renderer for rendering WebRTC remote streams (RTCVideoRenderer)</li> <li><code>signalStateListener</code>: Handle signal channel events</li> <li><code>rendererStateListener</code>: Handle renderer events</li> <li><code>dataChannelStateListener</code>: Handle data channel events</li> <li><code>onReceiveStatsData</code>: Callback function that receives playback statistics</li> </ul>"},{"location":"en/sdk/flutter/#initialize","title":"initialize()","text":"<p>Performs necessary tasks during initialization.</p> <pre><code>@override\nvoid initState() {\n    super.initState();\n    _liveStylerManager.initialize();\n}\n</code></pre>"},{"location":"en/sdk/flutter/#release","title":"release()","text":"<p>Completely terminates signal server connection and WebRTC connection and returns resources.</p> <pre><code>@override\nvoid dispose() {\n    _liveStylerManager.release();\n    super.dispose();\n}\n</code></pre>"},{"location":"en/sdk/flutter/#updatefiltercategory","title":"updateFilterCategory()","text":"<p>Updates by receiving new filter and category lists from the API server. The filter list is automatically updated when connecting to the signal server. The updated list is delivered through SignalStateListener.</p> <pre><code>_liveStylerManager.updateFilterCategory();\n</code></pre>"},{"location":"en/sdk/flutter/#switchcamerastring","title":"switchCamera(String)","text":"<p>Switches to the received camera ID. Camera ID can be obtained through CameraManager.</p> <pre><code>_liveStylerManager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li><code>camera_id</code>: Camera ID obtained through MediaDevices</li> </ul>"},{"location":"en/sdk/flutter/#changemodelstring","title":"changeModel(String)","text":"<p>Changes the filter model to the received model name.</p> <pre><code>_liveStylerManager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li><code>model_name</code>: Model name from FilterCategoryData</li> </ul>"},{"location":"en/sdk/flutter/#appenv","title":"AppEnv","text":"<p>The AppEnv class manages application environment settings.</p> <pre><code>// Environment configuration\nAppEnv.setEnv(\n    '{credential}',\n    '{apiEndpoint}',\n    '{signalEndpoint}',\n    '{iceServers}',\n    '{onTrialStarted}',\n    '{onTrialEnded}',\n    '{onChangeLanguage}',\n    '{language}',\n);\n</code></pre> <ul> <li><code>credential</code>: Authentication information</li> <li><code>apiEndpoint</code>: API endpoint URL</li> <li><code>signalEndpoint</code>: Signaling server endpoint URL</li> <li><code>iceServers</code>: ICE server configuration</li> <li><code>onTrialStarted</code>: Trial start callback</li> <li><code>onTrialEnded</code>: Trial end callback</li> <li><code>onChangeLanguage</code>: Language change callback</li> <li><code>language</code>: Initial language setting</li> </ul>"},{"location":"en/sdk/flutter/#usage-example","title":"Usage Example","text":"<pre><code>void main() async {\n  // Environment configuration\n  AppEnv.setEnv(\n    credential: 'your_credential',\n    apiEndpoint: 'https://api.example.com',\n    signalEndpoint: 'wss://signal.example.com',\n    iceServers: [\n      {'urls': 'stun:stun.example.com:19302'},\n    ],\n    language: 'en-US',\n  );\n\n  // LiveStylerManager initialization\n  final manager = LiveStylerManager(\n    credential: AppEnv.credential,\n    apiEndpoint: AppEnv.apiEndpoint,\n    signalEndpoint: AppEnv.signalEndpoint,\n    iceServerList: AppEnv.iceServers.map((server) =&gt; StunTurnServer.fromJson(server)).toList(),\n    localRenderer: RTCVideoRenderer(),\n    remoteRenderer: RTCVideoRenderer(),\n    signalStateListener: YourSignalStateListener(),\n    rendererStateListener: YourRendererStateListener(),\n    dataChannelStateListener: YourDataChannelStateListener(),\n    onReceiveStatsData: (stats) {\n      print('Received stats: $stats');\n    },\n  );\n\n  await manager.initialize();\n  await manager.start();\n\n  // Change style model\n  await manager.changeModel('romantic');\n\n  // Switch camera\n  await manager.switchCamera('front_camera_id');\n\n  // Terminate connection\n  await manager.stop();\n}\n</code></pre>"},{"location":"en/sdk/ios-streamviewcontroller/","title":"StreamViewController Source Code","text":"<pre><code>import AVFoundation\nimport UIKit\nimport WebRTC\n\npublic class StreamViewController: UIViewController {\n    private let manager: LiveStylerManager\n    private let label = UILabel()\n    private var appConstants: AppConstants\n\n    public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n        appConstants = AppConstants()\n        manager = LiveStylerManager(appConstants: appConstants)\n        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n    }\n\n    public required init?(coder: NSCoder) {\n        appConstants = AppConstants()\n        manager = LiveStylerManager(appConstants: appConstants)\n        super.init(coder: coder)\n    }\n\n    public init(appConstants: AppConstants) {\n        self.appConstants = appConstants\n        manager = LiveStylerManager(appConstants: appConstants)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    public override func viewDidLoad() {\n        super.viewDidLoad()\n        setupUI()\n        manager.initialize()\n    }\n\n    public override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        manager.activate()\n    }\n\n    public override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        manager.deactivate()\n    }\n\n    deinit {\n        manager.cleanup()\n    }\n\n    public func setAppConstants(appConstants: AppConstants) {\n        self.appConstants = appConstants\n        setupUI()\n        view.setNeedsLayout()\n    }\n\n    private func setupUI() {\n        title = \"WebRTC Test\"\n        view.backgroundColor = appConstants.colors.background\n\n        setupLabel()\n        setupVideoView()\n        setupLocalVideoView()\n    }\n\n    private func setupLabel() {\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.text = \"Video\"\n        label.font = UIFont.systemFont(\n            ofSize: appConstants.ui.titleFontSize,\n            weight: .bold\n        )\n        label.textAlignment = .center\n        label.textColor = appConstants.colors.text\n        view.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(\n                equalTo: view.safeAreaLayoutGuide.topAnchor,\n                constant: appConstants.ui.defaultMargin\n            ),\n            label.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            label.heightAnchor.constraint(equalToConstant: appConstants.ui.largeMargin),\n        ])\n    }\n\n    private func setupVideoView() {\n        let videoView = manager.videoView\n        videoView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(videoView)\n\n        NSLayoutConstraint.activate([\n            videoView.topAnchor.constraint(\n                equalTo: label.bottomAnchor, constant: appConstants.ui.defaultMargin),\n            videoView.leadingAnchor.constraint(\n                equalTo: view.leadingAnchor, constant: appConstants.ui.defaultMargin),\n            videoView.trailingAnchor.constraint(\n                equalTo: view.trailingAnchor, constant: -appConstants.ui.defaultMargin),\n            videoView.bottomAnchor.constraint(\n                equalTo: view.bottomAnchor, constant: -appConstants.ui.defaultMargin),\n        ])\n    }\n\n    private func setupLocalVideoView() {\n        let localVideoView = manager.localVideoView\n        localVideoView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(localVideoView)\n\n        NSLayoutConstraint.activate([\n            localVideoView.widthAnchor.constraint(\n                equalToConstant: appConstants.stream.localVideoSize.width),\n            localVideoView.heightAnchor.constraint(\n                equalToConstant: appConstants.stream.localVideoSize.height),\n            localVideoView.trailingAnchor.constraint(\n                equalTo: view.trailingAnchor, constant: -appConstants.ui.defaultMargin),\n            localVideoView.bottomAnchor.constraint(\n                equalTo: view.safeAreaLayoutGuide.bottomAnchor,\n                constant: -appConstants.ui.defaultMargin),\n        ])\n    }\n}\n</code></pre>"},{"location":"en/sdk/ios/","title":"LiveStyler SDK for iOS","text":"<p>This SDK is for applying LiveStyler features to iOS applications. The SDK provides functionality to initialize the camera, send the captured video, and receive and display the video after processing is complete.</p>"},{"location":"en/sdk/ios/#getting-started","title":"Getting Started","text":""},{"location":"en/sdk/ios/#requirements","title":"Requirements","text":"<ul> <li>iOS 12.0 or higher</li> <li>Xcode 12.0 or higher</li> <li>Swift 5.0 or higher</li> </ul>"},{"location":"en/sdk/ios/#key-features","title":"Key Features","text":"<ul> <li>Control video conversion through a signaling channel</li> <li>Send camera video to a WebRTC server</li> <li>Receive video with filters applied</li> </ul>"},{"location":"en/sdk/ios/#installation","title":"Installation","text":""},{"location":"en/sdk/ios/#cocoapods","title":"CocoaPods","text":"<p>Add the following line to your <code>Podfile</code>:</p> <pre><code>pod 'LiveStylerSDK', :git =&gt; 'https://{ghp_token}@github.com/dob-world/livestyler-sdk-ios.git', :tag =&gt; '0.0.1'\n</code></pre> <ul> <li><code>ghp_token</code>: This is a personal token used on GitHub. Use the personal token of an account that has access to the repository.</li> </ul> <p>And then run the following command:</p> <pre><code>$ pod install\n</code></pre>"},{"location":"en/sdk/ios/#how-to-use","title":"How to Use","text":""},{"location":"en/sdk/ios/#easy-usage","title":"Easy Usage","text":"<p>To test the functionality, you can easily apply and use the pre-implemented features.</p> <pre><code>import LiveStylerSDK\n\nlet contants = AppConstants(\n    servers: Servers(\n        credential: \"{user_credential}\",                // Access Token issued from the admin console\n        webSocketURL: \"{signaling_endpoint}\",           // Signaling channel endpoint address for exchanging authentication information with the backend\n        stunServer: \"stun:stun.l.google.com:19302\",     // STUN server address\n        turnServer: \"{turn_server_endpoint}\",           // TURN server address\n        turnUsername: \"{username}\",                     // TURN server authentication information\n        turnPassword: \"{password}\"                      // TURN server authentication information\n    )\n)\n\nStreamViewController(appConstants: contants)\n</code></pre>"},{"location":"en/sdk/ios/#custom-development","title":"Custom Development","text":"<p>For additional features not provided in the easy usage, or for custom implementation of UI/UX, it is recommended to implement it yourself.</p> <p>Please refer to the Key Feature Specifications described later for usage instructions. For an example, please refer to the source code of StreamViewController provided with the SDK.</p> <p>For detailed API specifications, please refer to iOS APIs.</p>"},{"location":"en/sdk/ios/#key-feature-specifications","title":"Key Feature Specifications","text":""},{"location":"en/sdk/ios/#livestylermanager","title":"LiveStylerManager","text":"<pre><code>/// Initialization\n\nlet contants = AppConstants(\n    servers: Servers(\n        credential: \"{user_credential}\",                // Access Token issued from the admin console\n        webSocketURL: \"{signaling_endpoint}\",           // Signaling channel endpoint address for exchanging authentication information with the backend\n        stunServer: \"stun:stun.l.google.com:19302\",     // STUN server address\n        turnServer: \"{turn_server_endpoint}\",           // TURN server address\n        turnUsername: \"{username}\",                     // TURN server authentication information\n        turnPassword: \"{password}\"                      // TURN server authentication information\n    )\n)\n\nlet manager = LiveStylerManager(appConstants: contants)\n</code></pre>"},{"location":"en/sdk/ios/#initialize","title":"initialize()","text":"<p>Performs necessary tasks during initialization.</p> <pre><code>public override func viewDidLoad() {\n    super.viewDidLoad()\n    manager.initialize()\n}\n</code></pre>"},{"location":"en/sdk/ios/#activate","title":"activate()","text":"<p>Starts camera capture.</p> <pre><code>public override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    manager.activate()\n}\n</code></pre>"},{"location":"en/sdk/ios/#deactivate","title":"deactivate()","text":"<p>Stops camera capture.</p> <pre><code>public override func viewDidDisappear(_ animated: Bool) {\n    super.viewDidDisappear(animated)\n    manager.deactivate()\n}\n</code></pre>"},{"location":"en/sdk/ios/#cleanup","title":"cleanup()","text":"<p>Completely terminates the signal server and WebRTC connections and releases resources.</p> <pre><code>deinit {\n    manager.cleanup()\n}\n</code></pre>"},{"location":"en/sdk/ios/#switchcameracameraid-string","title":"switchCamera(cameraId: String)","text":"<p>Switches to the camera with the received camera ID. The camera ID can be obtained through AVCaptureDevice.</p> <pre><code>manager.switchCamera(\"{camera_id}\")\n</code></pre> <ul> <li>camera_id: The ID of the camera obtained through AVCaptureDevice (iOS system tool).</li> </ul>"},{"location":"en/sdk/ios/#changemodelmodelname-string","title":"changeModel(modelName: String)","text":"<p>Changes the filter model to the received model name.</p> <pre><code>manager.changeModel(\"{model_name}\")\n</code></pre> <ul> <li>model_name: The model name from FilterCategoryData.</li> </ul> <p>The iOS SDK does not include a process to fetch the model list via the API. Please refer to the API guide to check and use the model list.</p>"},{"location":"en/sdk/overview/","title":"LiveStyler SDK","text":"<p>LiveStyler is a real-time AI video filter service that further develops the AI-based video filter service Devut.ai developed by dob Studio.</p>"},{"location":"en/sdk/overview/#why-livestyler","title":"Why LiveStyler?","text":"<p>LiveStyler is designed to reduce construction costs and enable easy adoption by providing cloud-based AI models that would otherwise require significant costs to build and maintain as on-premise installations.</p> <p>Through applications or web services, you can create videos with AI filters applied by transmitting camera-captured video to the cloud in real-time.</p>"},{"location":"en/sdk/overview/#requirements","title":"Requirements","text":""},{"location":"en/sdk/overview/#mobile","title":"Mobile","text":"<ul> <li>Android 9.0 or higher, or iOS 13 or higher</li> <li>Snapdragon 850 or higher released after 2018</li> </ul> <p>Some budget devices may experience device malfunctions or overheating when using camera hardware for extended periods.</p>"},{"location":"en/sdk/overview/#web","title":"Web","text":"<ul> <li>Latest Chrome browser or Opera browser running in 64-bit environment</li> </ul> <p>Safari and Firefox are not supported.</p>"},{"location":"en/sdk/overview/#livestyler-sdk_1","title":"LiveStyler SDK","text":"<p>LiveStyler SDK is available for various platforms and frameworks.</p> <ul> <li>Android SDK</li> <li>iOS SDK</li> <li>Flutter SDK</li> <li>Flutter Web SDK</li> </ul>"}]}